// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/Clipboard

#ifndef org_chromium_ui_base_Clipboard_JNI
#define org_chromium_ui_base_Clipboard_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_base_Clipboard[];
const char kClassPath_org_chromium_ui_base_Clipboard[] = "org/chromium/ui/base/Clipboard";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_ui_base_Clipboard_clazz = 0;
#ifndef org_chromium_ui_base_Clipboard_clazz_defined
#define org_chromium_ui_base_Clipboard_clazz_defined
inline jclass org_chromium_ui_base_Clipboard_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_base_Clipboard,
      &g_org_chromium_ui_base_Clipboard_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace ui {

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_Clipboard_nativeOnPrimaryClipChanged(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeClipboardAndroid) {
  ClipboardAndroid* native = reinterpret_cast<ClipboardAndroid*>(nativeClipboardAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPrimaryClipChanged");
  return native->OnPrimaryClipChanged(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_ui_base_Clipboard_nativeOnPrimaryClipTimestampInvalidated(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeClipboardAndroid,
    jlong timestamp) {
  ClipboardAndroid* native = reinterpret_cast<ClipboardAndroid*>(nativeClipboardAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPrimaryClipTimestampInvalidated");
  return native->OnPrimaryClipTimestampInvalidated(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timestamp);
}


static base::subtle::AtomicWord g_org_chromium_ui_base_Clipboard_getInstance = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Clipboard_getInstance(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_ui_base_Clipboard_clazz(env),
      org_chromium_ui_base_Clipboard_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_ui_base_Clipboard_clazz(env),
          "getInstance",
          "()Lorg/chromium/ui/base/Clipboard;",
          &g_org_chromium_ui_base_Clipboard_getInstance);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_ui_base_Clipboard_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_Clipboard_getCoercedText = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_Clipboard_getCoercedText(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_Clipboard_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_Clipboard_clazz(env),
          "getCoercedText",
          "()Ljava/lang/String;",
          &g_org_chromium_ui_base_Clipboard_getCoercedText);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_Clipboard_getHTMLText = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_Clipboard_getHTMLText(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_Clipboard_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_Clipboard_clazz(env),
          "getHTMLText",
          "()Ljava/lang/String;",
          &g_org_chromium_ui_base_Clipboard_getHTMLText);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_Clipboard_setText = 0;
static void Java_Clipboard_setText(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jstring>& text) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_Clipboard_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_Clipboard_clazz(env),
          "setText",
          "(Ljava/lang/String;)V",
          &g_org_chromium_ui_base_Clipboard_setText);

     env->CallVoidMethod(obj.obj(),
          method_id, text.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_Clipboard_setHTMLText = 0;
static void Java_Clipboard_setHTMLText(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jstring>& html,
    const base::android::JavaRef<jstring>& text) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_Clipboard_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_Clipboard_clazz(env),
          "setHTMLText",
          "(Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_ui_base_Clipboard_setHTMLText);

     env->CallVoidMethod(obj.obj(),
          method_id, html.obj(), text.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_Clipboard_clear = 0;
static void Java_Clipboard_clear(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_Clipboard_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_Clipboard_clazz(env),
          "clear",
          "()V",
          &g_org_chromium_ui_base_Clipboard_clear);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_Clipboard_setNativePtr = 0;
static void Java_Clipboard_setNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    jlong nativeClipboard) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_Clipboard_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_Clipboard_clazz(env),
          "setNativePtr",
          "(J)V",
          &g_org_chromium_ui_base_Clipboard_setNativePtr);

     env->CallVoidMethod(obj.obj(),
          method_id, nativeClipboard);
  jni_generator::CheckException(env);
}

}  // namespace ui

#endif  // org_chromium_ui_base_Clipboard_JNI
