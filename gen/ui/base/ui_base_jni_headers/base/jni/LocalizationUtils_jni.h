// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/LocalizationUtils

#ifndef org_chromium_ui_base_LocalizationUtils_JNI
#define org_chromium_ui_base_LocalizationUtils_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_base_LocalizationUtils[];
const char kClassPath_org_chromium_ui_base_LocalizationUtils[] =
    "org/chromium/ui/base/LocalizationUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_ui_base_LocalizationUtils_clazz = 0;
#ifndef org_chromium_ui_base_LocalizationUtils_clazz_defined
#define org_chromium_ui_base_LocalizationUtils_clazz_defined
inline jclass org_chromium_ui_base_LocalizationUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_base_LocalizationUtils,
      &g_org_chromium_ui_base_LocalizationUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace l10n_util {

static jint JNI_LocalizationUtils_GetFirstStrongCharacterDirection(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& string);

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_ui_base_LocalizationUtils_nativeGetFirstStrongCharacterDirection(
    JNIEnv* env,
    jclass jcaller,
    jstring string) {
  return JNI_LocalizationUtils_GetFirstStrongCharacterDirection(env,
      base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env,
      string));
}


static base::subtle::AtomicWord g_org_chromium_ui_base_LocalizationUtils_getJavaLocale = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_LocalizationUtils_getJavaLocale(JNIEnv* env,
    const base::android::JavaRef<jstring>& language,
    const base::android::JavaRef<jstring>& country,
    const base::android::JavaRef<jstring>& variant) {
  CHECK_CLAZZ(env, org_chromium_ui_base_LocalizationUtils_clazz(env),
      org_chromium_ui_base_LocalizationUtils_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_ui_base_LocalizationUtils_clazz(env),
          "getJavaLocale",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale;",
          &g_org_chromium_ui_base_LocalizationUtils_getJavaLocale);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_ui_base_LocalizationUtils_clazz(env),
          method_id, language.obj(), country.obj(), variant.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_LocalizationUtils_getDisplayNameForLocale =
    0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_LocalizationUtils_getDisplayNameForLocale(JNIEnv* env, const
    base::android::JavaRef<jobject>& locale,
    const base::android::JavaRef<jobject>& displayLocale) {
  CHECK_CLAZZ(env, org_chromium_ui_base_LocalizationUtils_clazz(env),
      org_chromium_ui_base_LocalizationUtils_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_ui_base_LocalizationUtils_clazz(env),
          "getDisplayNameForLocale",
          "(Ljava/util/Locale;Ljava/util/Locale;)Ljava/lang/String;",
          &g_org_chromium_ui_base_LocalizationUtils_getDisplayNameForLocale);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_ui_base_LocalizationUtils_clazz(env),
          method_id, locale.obj(), displayLocale.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_LocalizationUtils_isLayoutRtl = 0;
static jboolean Java_LocalizationUtils_isLayoutRtl(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_ui_base_LocalizationUtils_clazz(env),
      org_chromium_ui_base_LocalizationUtils_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_ui_base_LocalizationUtils_clazz(env),
          "isLayoutRtl",
          "()Z",
          &g_org_chromium_ui_base_LocalizationUtils_isLayoutRtl);

  jboolean ret =
      env->CallStaticBooleanMethod(org_chromium_ui_base_LocalizationUtils_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace l10n_util

#endif  // org_chromium_ui_base_LocalizationUtils_JNI
