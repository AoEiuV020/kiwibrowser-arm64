// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/display/DisplayAndroidManager

#ifndef org_chromium_ui_display_DisplayAndroidManager_JNI
#define org_chromium_ui_display_DisplayAndroidManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_ui_display_DisplayAndroidManager[];
const char kClassPath_org_chromium_ui_display_DisplayAndroidManager[] =
    "org/chromium/ui/display/DisplayAndroidManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_ui_display_DisplayAndroidManager_clazz = 0;
#ifndef org_chromium_ui_display_DisplayAndroidManager_clazz_defined
#define org_chromium_ui_display_DisplayAndroidManager_clazz_defined
inline jclass org_chromium_ui_display_DisplayAndroidManager_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_display_DisplayAndroidManager,
      &g_org_chromium_ui_display_DisplayAndroidManager_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace ui {

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_display_DisplayAndroidManager_nativeUpdateDisplay(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeDisplayAndroidManager,
    jint sdkDisplayId,
    jint width,
    jint height,
    jfloat dipScale,
    jint rotationDegrees,
    jint bitsPerPixel,
    jint bitsPerComponent,
    jboolean isWideColorGamut) {
  DisplayAndroidManager* native =
      reinterpret_cast<DisplayAndroidManager*>(nativeDisplayAndroidManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateDisplay");
  return native->UpdateDisplay(env, base::android::JavaParamRef<jobject>(env, jcaller),
      sdkDisplayId, width, height, dipScale, rotationDegrees, bitsPerPixel, bitsPerComponent,
      isWideColorGamut);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_display_DisplayAndroidManager_nativeRemoveDisplay(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeDisplayAndroidManager,
    jint sdkDisplayId) {
  DisplayAndroidManager* native =
      reinterpret_cast<DisplayAndroidManager*>(nativeDisplayAndroidManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveDisplay");
  return native->RemoveDisplay(env, base::android::JavaParamRef<jobject>(env, jcaller),
      sdkDisplayId);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_ui_display_DisplayAndroidManager_nativeSetPrimaryDisplayId(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeDisplayAndroidManager,
    jint sdkDisplayId) {
  DisplayAndroidManager* native =
      reinterpret_cast<DisplayAndroidManager*>(nativeDisplayAndroidManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPrimaryDisplayId");
  return native->SetPrimaryDisplayId(env, base::android::JavaParamRef<jobject>(env, jcaller),
      sdkDisplayId);
}


static base::subtle::AtomicWord g_org_chromium_ui_display_DisplayAndroidManager_onNativeSideCreated
    = 0;
static void Java_DisplayAndroidManager_onNativeSideCreated(JNIEnv* env, jlong nativePointer) {
  CHECK_CLAZZ(env, org_chromium_ui_display_DisplayAndroidManager_clazz(env),
      org_chromium_ui_display_DisplayAndroidManager_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_ui_display_DisplayAndroidManager_clazz(env),
          "onNativeSideCreated",
          "(J)V",
          &g_org_chromium_ui_display_DisplayAndroidManager_onNativeSideCreated);

     env->CallStaticVoidMethod(org_chromium_ui_display_DisplayAndroidManager_clazz(env),
          method_id, nativePointer);
  jni_generator::CheckException(env);
}

}  // namespace ui

#endif  // org_chromium_ui_display_DisplayAndroidManager_JNI
