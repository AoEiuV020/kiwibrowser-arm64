// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/WindowAndroid

#ifndef org_chromium_ui_base_WindowAndroid_JNI
#define org_chromium_ui_base_WindowAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_base_WindowAndroid[];
const char kClassPath_org_chromium_ui_base_WindowAndroid[] = "org/chromium/ui/base/WindowAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_ui_base_WindowAndroid_clazz = 0;
#ifndef org_chromium_ui_base_WindowAndroid_clazz_defined
#define org_chromium_ui_base_WindowAndroid_clazz_defined
inline jclass org_chromium_ui_base_WindowAndroid_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_base_WindowAndroid,
      &g_org_chromium_ui_base_WindowAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace ui {

static jlong JNI_WindowAndroid_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jint displayId,
    jfloat scrollFactor);

JNI_GENERATOR_EXPORT jlong Java_org_chromium_ui_base_WindowAndroid_nativeInit(
    JNIEnv* env,
    jobject jcaller,
    jint displayId,
    jfloat scrollFactor) {
  return JNI_WindowAndroid_Init(env, base::android::JavaParamRef<jobject>(env, jcaller), displayId,
      scrollFactor);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_WindowAndroid_nativeOnVSync(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWindowAndroid,
    jlong vsyncTimeMicros,
    jlong vsyncPeriodMicros) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnVSync");
  return native->OnVSync(env, base::android::JavaParamRef<jobject>(env, jcaller), vsyncTimeMicros,
      vsyncPeriodMicros);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_WindowAndroid_nativeOnVisibilityChanged(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWindowAndroid,
    jboolean visible) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnVisibilityChanged");
  return native->OnVisibilityChanged(env, base::android::JavaParamRef<jobject>(env, jcaller),
      visible);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_WindowAndroid_nativeOnActivityStopped(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWindowAndroid) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnActivityStopped");
  return native->OnActivityStopped(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_WindowAndroid_nativeOnActivityStarted(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWindowAndroid) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnActivityStarted");
  return native->OnActivityStarted(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_WindowAndroid_nativeSetVSyncPaused(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWindowAndroid,
    jboolean paused) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetVSyncPaused");
  return native->SetVSyncPaused(env, base::android::JavaParamRef<jobject>(env, jcaller), paused);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_WindowAndroid_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWindowAndroid) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}


static base::subtle::AtomicWord g_org_chromium_ui_base_WindowAndroid_createForTesting = 0;
static jlong Java_WindowAndroid_createForTesting(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_ui_base_WindowAndroid_clazz(env),
      org_chromium_ui_base_WindowAndroid_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_ui_base_WindowAndroid_clazz(env),
          "createForTesting",
          "()J",
          &g_org_chromium_ui_base_WindowAndroid_createForTesting);

  jlong ret =
      env->CallStaticLongMethod(org_chromium_ui_base_WindowAndroid_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_ui_base_WindowAndroid_clearNativePointer = 0;
static void Java_WindowAndroid_clearNativePointer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_WindowAndroid_clazz(env),
          "clearNativePointer",
          "()V",
          &g_org_chromium_ui_base_WindowAndroid_clearNativePointer);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_WindowAndroid_hasPermission = 0;
static jboolean Java_WindowAndroid_hasPermission(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jstring>& permission) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_WindowAndroid_clazz(env),
          "hasPermission",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_ui_base_WindowAndroid_hasPermission);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, permission.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_ui_base_WindowAndroid_canRequestPermission = 0;
static jboolean Java_WindowAndroid_canRequestPermission(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& permission) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_WindowAndroid_clazz(env),
          "canRequestPermission",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_ui_base_WindowAndroid_canRequestPermission);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, permission.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_ui_base_WindowAndroid_requestVSyncUpdate = 0;
static void Java_WindowAndroid_requestVSyncUpdate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_WindowAndroid_clazz(env),
          "requestVSyncUpdate",
          "()V",
          &g_org_chromium_ui_base_WindowAndroid_requestVSyncUpdate);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_WindowAndroid_getNativePointer = 0;
static jlong Java_WindowAndroid_getNativePointer(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_WindowAndroid_clazz(env),
          "getNativePointer",
          "()J",
          &g_org_chromium_ui_base_WindowAndroid_getNativePointer);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_ui_base_WindowAndroid_getWindowToken = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_WindowAndroid_getWindowToken(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_WindowAndroid_clazz(env),
          "getWindowToken",
          "()Landroid/os/IBinder;",
          &g_org_chromium_ui_base_WindowAndroid_getWindowToken);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace ui

#endif  // org_chromium_ui_base_WindowAndroid_JNI
