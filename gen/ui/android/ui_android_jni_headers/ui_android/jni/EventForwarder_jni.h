// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/EventForwarder

#ifndef org_chromium_ui_base_EventForwarder_JNI
#define org_chromium_ui_base_EventForwarder_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_base_EventForwarder[];
const char kClassPath_org_chromium_ui_base_EventForwarder[] = "org/chromium/ui/base/EventForwarder";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_ui_base_EventForwarder_clazz = 0;
#ifndef org_chromium_ui_base_EventForwarder_clazz_defined
#define org_chromium_ui_base_EventForwarder_clazz_defined
inline jclass org_chromium_ui_base_EventForwarder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_base_EventForwarder,
      &g_org_chromium_ui_base_EventForwarder_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace ui {

JNI_GENERATOR_EXPORT jobject Java_org_chromium_ui_base_EventForwarder_nativeGetJavaWindowAndroid(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetJavaWindowAndroid", NULL);
  return native->GetJavaWindowAndroid(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_org_chromium_ui_base_EventForwarder_nativeOnTouchEvent(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jobject event,
    jlong timeMs,
    jint action,
    jint pointerCount,
    jint historySize,
    jint actionIndex,
    jfloat x0,
    jfloat y0,
    jfloat x1,
    jfloat y1,
    jint pointerId0,
    jint pointerId1,
    jfloat touchMajor0,
    jfloat touchMajor1,
    jfloat touchMinor0,
    jfloat touchMinor1,
    jfloat orientation0,
    jfloat orientation1,
    jfloat tilt0,
    jfloat tilt1,
    jfloat rawX,
    jfloat rawY,
    jint androidToolType0,
    jint androidToolType1,
    jint androidButtonState,
    jint androidMetaState,
    jboolean isTouchHandleEvent) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTouchEvent", false);
  return native->OnTouchEvent(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, event), timeMs, action, pointerCount, historySize,
      actionIndex, x0, y0, x1, y1, pointerId0, pointerId1, touchMajor0, touchMajor1, touchMinor0,
      touchMinor1, orientation0, orientation1, tilt0, tilt1, rawX, rawY, androidToolType0,
      androidToolType1, androidButtonState, androidMetaState, isTouchHandleEvent);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_EventForwarder_nativeOnMouseEvent(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jlong timeMs,
    jint action,
    jfloat x,
    jfloat y,
    jint pointerId,
    jfloat pressure,
    jfloat orientation,
    jfloat tilt,
    jint changedButton,
    jint buttonState,
    jint metaState,
    jint toolType) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnMouseEvent");
  return native->OnMouseEvent(env, base::android::JavaParamRef<jobject>(env, jcaller), timeMs,
      action, x, y, pointerId, pressure, orientation, tilt, changedButton, buttonState, metaState,
      toolType);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_EventForwarder_nativeOnDragEvent(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jint action,
    jint x,
    jint y,
    jint screenX,
    jint screenY,
    jobjectArray mimeTypes,
    jstring content) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDragEvent");
  return native->OnDragEvent(env, base::android::JavaParamRef<jobject>(env, jcaller), action, x, y,
      screenX, screenY, base::android::JavaParamRef<jobjectArray>(env, mimeTypes),
      base::android::JavaParamRef<jstring>(env, content));
}

JNI_GENERATOR_EXPORT jboolean Java_org_chromium_ui_base_EventForwarder_nativeOnGestureEvent(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jint type,
    jlong timeMs,
    jfloat delta) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnGestureEvent", false);
  return native->OnGestureEvent(env, base::android::JavaParamRef<jobject>(env, jcaller), type,
      timeMs, delta);
}

JNI_GENERATOR_EXPORT jboolean Java_org_chromium_ui_base_EventForwarder_nativeOnGenericMotionEvent(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jobject event,
    jlong timeMs) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnGenericMotionEvent", false);
  return native->OnGenericMotionEvent(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, event), timeMs);
}

JNI_GENERATOR_EXPORT jboolean Java_org_chromium_ui_base_EventForwarder_nativeOnKeyUp(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jobject event,
    jint keyCode) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnKeyUp", false);
  return native->OnKeyUp(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, event), keyCode);
}

JNI_GENERATOR_EXPORT jboolean Java_org_chromium_ui_base_EventForwarder_nativeDispatchKeyEvent(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jobject event) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "DispatchKeyEvent", false);
  return native->DispatchKeyEvent(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, event));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_EventForwarder_nativeScrollBy(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jfloat deltaX,
    jfloat deltaY) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollBy");
  return native->ScrollBy(env, base::android::JavaParamRef<jobject>(env, jcaller), deltaX, deltaY);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_EventForwarder_nativeScrollTo(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jfloat x,
    jfloat y) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollTo");
  return native->ScrollTo(env, base::android::JavaParamRef<jobject>(env, jcaller), x, y);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_EventForwarder_nativeDoubleTap(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jlong timeMs,
    jint x,
    jint y) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "DoubleTap");
  return native->DoubleTap(env, base::android::JavaParamRef<jobject>(env, jcaller), timeMs, x, y);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_EventForwarder_nativeStartFling(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jlong timeMs,
    jfloat velocityX,
    jfloat velocityY,
    jboolean syntheticScroll,
    jboolean preventBoosting) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartFling");
  return native->StartFling(env, base::android::JavaParamRef<jobject>(env, jcaller), timeMs,
      velocityX, velocityY, syntheticScroll, preventBoosting);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_ui_base_EventForwarder_nativeCancelFling(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeEventForwarder,
    jlong timeMs,
    jboolean preventBoosting) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelFling");
  return native->CancelFling(env, base::android::JavaParamRef<jobject>(env, jcaller), timeMs,
      preventBoosting);
}


static base::subtle::AtomicWord g_org_chromium_ui_base_EventForwarder_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_EventForwarder_create(JNIEnv* env, jlong
    nativeEventForwarder,
    jboolean isDragDropEnabled) {
  CHECK_CLAZZ(env, org_chromium_ui_base_EventForwarder_clazz(env),
      org_chromium_ui_base_EventForwarder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_ui_base_EventForwarder_clazz(env),
          "create",
          "(JZ)Lorg/chromium/ui/base/EventForwarder;",
          &g_org_chromium_ui_base_EventForwarder_create);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_ui_base_EventForwarder_clazz(env),
          method_id, nativeEventForwarder, isDragDropEnabled);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_ui_base_EventForwarder_destroy = 0;
static void Java_EventForwarder_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_EventForwarder_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_ui_base_EventForwarder_clazz(env),
          "destroy",
          "()V",
          &g_org_chromium_ui_base_EventForwarder_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace ui

#endif  // org_chromium_ui_base_EventForwarder_JNI
