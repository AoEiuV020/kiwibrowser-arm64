// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/shape_detection/InterfaceRegistrar

#ifndef org_chromium_shape_detection_InterfaceRegistrar_JNI
#define org_chromium_shape_detection_InterfaceRegistrar_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_shape_1detection_InterfaceRegistrar[];
const char kClassPath_org_chromium_shape_1detection_InterfaceRegistrar[] =
    "org/chromium/shape_detection/InterfaceRegistrar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_shape_1detection_InterfaceRegistrar_clazz = 0;
#ifndef org_chromium_shape_1detection_InterfaceRegistrar_clazz_defined
#define org_chromium_shape_1detection_InterfaceRegistrar_clazz_defined
inline jclass org_chromium_shape_1detection_InterfaceRegistrar_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_shape_1detection_InterfaceRegistrar,
      &g_org_chromium_shape_1detection_InterfaceRegistrar_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace shape_detection {


static base::subtle::AtomicWord
    g_org_chromium_shape_1detection_InterfaceRegistrar_createInterfaceRegistryForContext = 0;
static void Java_InterfaceRegistrar_createInterfaceRegistryForContext(JNIEnv* env, JniIntWrapper
    nativeHandle) {
  CHECK_CLAZZ(env, org_chromium_shape_1detection_InterfaceRegistrar_clazz(env),
      org_chromium_shape_1detection_InterfaceRegistrar_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_shape_1detection_InterfaceRegistrar_clazz(env),
          "createInterfaceRegistryForContext",
          "(I)V",
          &g_org_chromium_shape_1detection_InterfaceRegistrar_createInterfaceRegistryForContext);

     env->CallStaticVoidMethod(org_chromium_shape_1detection_InterfaceRegistrar_clazz(env),
          method_id, as_jint(nativeHandle));
  jni_generator::CheckException(env);
}

}  // namespace shape_detection

#endif  // org_chromium_shape_detection_InterfaceRegistrar_JNI
