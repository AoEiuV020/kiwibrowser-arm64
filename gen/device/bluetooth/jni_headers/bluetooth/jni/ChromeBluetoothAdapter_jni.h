// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/bluetooth/ChromeBluetoothAdapter

#ifndef org_chromium_device_bluetooth_ChromeBluetoothAdapter_JNI
#define org_chromium_device_bluetooth_ChromeBluetoothAdapter_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_device_bluetooth_ChromeBluetoothAdapter[];
const char kClassPath_org_chromium_device_bluetooth_ChromeBluetoothAdapter[] =
    "org/chromium/device/bluetooth/ChromeBluetoothAdapter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz = 0;
#ifndef org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz_defined
#define org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz_defined
inline jclass org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_device_bluetooth_ChromeBluetoothAdapter,
      &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {

JNI_GENERATOR_EXPORT void
    Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeOnScanFailed(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeBluetoothAdapterAndroid) {
  BluetoothAdapterAndroid* native =
      reinterpret_cast<BluetoothAdapterAndroid*>(nativeBluetoothAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnScanFailed");
  return native->OnScanFailed(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeCreateOrUpdateDeviceOnScan(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeBluetoothAdapterAndroid,
    jstring address,
    jobject deviceWrapper,
    jint rssi,
    jobjectArray advertisedUuids,
    jint txPower,
    jobjectArray serviceDataKeys,
    jobjectArray serviceDataValues,
    jintArray manufacturerDataKeys,
    jobjectArray manufacturerDataValues) {
  BluetoothAdapterAndroid* native =
      reinterpret_cast<BluetoothAdapterAndroid*>(nativeBluetoothAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CreateOrUpdateDeviceOnScan");
  return native->CreateOrUpdateDeviceOnScan(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, address), base::android::JavaParamRef<jobject>(env,
      deviceWrapper), rssi, base::android::JavaParamRef<jobjectArray>(env, advertisedUuids),
      txPower, base::android::JavaParamRef<jobjectArray>(env, serviceDataKeys),
      base::android::JavaParamRef<jobjectArray>(env, serviceDataValues),
      base::android::JavaParamRef<jintArray>(env, manufacturerDataKeys),
      base::android::JavaParamRef<jobjectArray>(env, manufacturerDataValues));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeOnAdapterStateChanged(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeBluetoothAdapterAndroid,
    jboolean powered) {
  BluetoothAdapterAndroid* native =
      reinterpret_cast<BluetoothAdapterAndroid*>(nativeBluetoothAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAdapterStateChanged");
  return native->OnAdapterStateChanged(env, base::android::JavaParamRef<jobject>(env, jcaller),
      powered);
}


static base::subtle::AtomicWord
    g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_onBluetoothAdapterAndroidDestruction = 0;
static void Java_ChromeBluetoothAdapter_onBluetoothAdapterAndroidDestruction(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "onBluetoothAdapterAndroidDestruction",
          "()V",
&g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_onBluetoothAdapterAndroidDestruction);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_ChromeBluetoothAdapter_create(JNIEnv* env,
    jlong nativeBluetoothAdapterAndroid,
    const base::android::JavaRef<jobject>& adapterWrapper) {
  CHECK_CLAZZ(env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "create",
"(JLorg/chromium/device/bluetooth/Wrappers$BluetoothAdapterWrapper;)Lorg/chromium/device/bluetooth/ChromeBluetoothAdapter;",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_create);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          method_id, nativeBluetoothAdapterAndroid, adapterWrapper.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_getAddress =
    0;
static base::android::ScopedJavaLocalRef<jstring> Java_ChromeBluetoothAdapter_getAddress(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "getAddress",
          "()Ljava/lang/String;",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_getAddress);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_getName = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_ChromeBluetoothAdapter_getName(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "getName",
          "()Ljava/lang/String;",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_getName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_isPresent =
    0;
static jboolean Java_ChromeBluetoothAdapter_isPresent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "isPresent",
          "()Z",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_isPresent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_isPowered =
    0;
static jboolean Java_ChromeBluetoothAdapter_isPowered(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "isPowered",
          "()Z",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_isPowered);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_setPowered =
    0;
static jboolean Java_ChromeBluetoothAdapter_setPowered(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean powered) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "setPowered",
          "(Z)Z",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_setPowered);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, powered);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_isDiscoverable = 0;
static jboolean Java_ChromeBluetoothAdapter_isDiscoverable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "isDiscoverable",
          "()Z",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_isDiscoverable);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_isDiscovering
    = 0;
static jboolean Java_ChromeBluetoothAdapter_isDiscovering(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "isDiscovering",
          "()Z",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_isDiscovering);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_startScan =
    0;
static jboolean Java_ChromeBluetoothAdapter_startScan(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "startScan",
          "()Z",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_startScan);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_stopScan = 0;
static jboolean Java_ChromeBluetoothAdapter_stopScan(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_bluetooth_ChromeBluetoothAdapter_clazz(env),
          "stopScan",
          "()Z",
          &g_org_chromium_device_bluetooth_ChromeBluetoothAdapter_stopScan);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace device

#endif  // org_chromium_device_bluetooth_ChromeBluetoothAdapter_JNI
