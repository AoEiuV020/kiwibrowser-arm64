// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/geolocation/LocationProviderAdapter

#ifndef org_chromium_device_geolocation_LocationProviderAdapter_JNI
#define org_chromium_device_geolocation_LocationProviderAdapter_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_device_geolocation_LocationProviderAdapter[];
const char kClassPath_org_chromium_device_geolocation_LocationProviderAdapter[] =
    "org/chromium/device/geolocation/LocationProviderAdapter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_device_geolocation_LocationProviderAdapter_clazz = 0;
#ifndef org_chromium_device_geolocation_LocationProviderAdapter_clazz_defined
#define org_chromium_device_geolocation_LocationProviderAdapter_clazz_defined
inline jclass org_chromium_device_geolocation_LocationProviderAdapter_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_device_geolocation_LocationProviderAdapter,
      &g_org_chromium_device_geolocation_LocationProviderAdapter_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_LocationProviderAdapter_NewLocationAvailable(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jdouble latitude,
    jdouble longitude,
    jdouble timeStamp,
    jboolean hasAltitude,
    jdouble altitude,
    jboolean hasAccuracy,
    jdouble accuracy,
    jboolean hasHeading,
    jdouble heading,
    jboolean hasSpeed,
    jdouble speed);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_device_geolocation_LocationProviderAdapter_nativeNewLocationAvailable(
    JNIEnv* env,
    jclass jcaller,
    jdouble latitude,
    jdouble longitude,
    jdouble timeStamp,
    jboolean hasAltitude,
    jdouble altitude,
    jboolean hasAccuracy,
    jdouble accuracy,
    jboolean hasHeading,
    jdouble heading,
    jboolean hasSpeed,
    jdouble speed) {
  return JNI_LocationProviderAdapter_NewLocationAvailable(env,
      base::android::JavaParamRef<jclass>(env, jcaller), latitude, longitude, timeStamp,
      hasAltitude, altitude, hasAccuracy, accuracy, hasHeading, heading, hasSpeed, speed);
}

static void JNI_LocationProviderAdapter_NewErrorAvailable(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& message);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_device_geolocation_LocationProviderAdapter_nativeNewErrorAvailable(
    JNIEnv* env,
    jclass jcaller,
    jstring message) {
  return JNI_LocationProviderAdapter_NewErrorAvailable(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, message));
}


static base::subtle::AtomicWord g_org_chromium_device_geolocation_LocationProviderAdapter_create =
    0;
static base::android::ScopedJavaLocalRef<jobject> Java_LocationProviderAdapter_create(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_device_geolocation_LocationProviderAdapter_clazz(env),
      org_chromium_device_geolocation_LocationProviderAdapter_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_device_geolocation_LocationProviderAdapter_clazz(env),
          "create",
          "()Lorg/chromium/device/geolocation/LocationProviderAdapter;",
          &g_org_chromium_device_geolocation_LocationProviderAdapter_create);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_device_geolocation_LocationProviderAdapter_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_device_geolocation_LocationProviderAdapter_start = 0;
static void Java_LocationProviderAdapter_start(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jboolean enableHighAccuracy) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_geolocation_LocationProviderAdapter_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_geolocation_LocationProviderAdapter_clazz(env),
          "start",
          "(Z)V",
          &g_org_chromium_device_geolocation_LocationProviderAdapter_start);

     env->CallVoidMethod(obj.obj(),
          method_id, enableHighAccuracy);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_device_geolocation_LocationProviderAdapter_stop = 0;
static void Java_LocationProviderAdapter_stop(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_geolocation_LocationProviderAdapter_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_device_geolocation_LocationProviderAdapter_clazz(env),
          "stop",
          "()V",
          &g_org_chromium_device_geolocation_LocationProviderAdapter_stop);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

#endif  // org_chromium_device_geolocation_LocationProviderAdapter_JNI
