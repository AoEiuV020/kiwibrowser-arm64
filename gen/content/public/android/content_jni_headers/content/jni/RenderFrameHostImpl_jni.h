// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/framehost/RenderFrameHostImpl

#ifndef org_chromium_content_browser_framehost_RenderFrameHostImpl_JNI
#define org_chromium_content_browser_framehost_RenderFrameHostImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_framehost_RenderFrameHostImpl[];
const char kClassPath_org_chromium_content_browser_framehost_RenderFrameHostImpl[] =
    "org/chromium/content/browser/framehost/RenderFrameHostImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz = 0;
#ifndef org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz_defined
#define org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz_defined
inline jclass org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_framehost_RenderFrameHostImpl,
      &g_org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_content_browser_framehost_RenderFrameHostImpl_nativeGetLastCommittedURL(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeRenderFrameHostAndroid) {
  RenderFrameHostAndroid* native =
      reinterpret_cast<RenderFrameHostAndroid*>(nativeRenderFrameHostAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLastCommittedURL", NULL);
  return native->GetLastCommittedURL(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_framehost_RenderFrameHostImpl_nativeGetCanonicalUrlForSharing(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeRenderFrameHostAndroid,
    jobject callback) {
  RenderFrameHostAndroid* native =
      reinterpret_cast<RenderFrameHostAndroid*>(nativeRenderFrameHostAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCanonicalUrlForSharing");
  return native->GetCanonicalUrlForSharing(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_framehost_RenderFrameHostImpl_nativeGetAndroidOverlayRoutingToken(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeRenderFrameHostAndroid) {
  RenderFrameHostAndroid* native =
      reinterpret_cast<RenderFrameHostAndroid*>(nativeRenderFrameHostAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAndroidOverlayRoutingToken", NULL);
  return native->GetAndroidOverlayRoutingToken(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_framehost_RenderFrameHostImpl_nativeNotifyUserActivation(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeRenderFrameHostAndroid) {
  RenderFrameHostAndroid* native =
      reinterpret_cast<RenderFrameHostAndroid*>(nativeRenderFrameHostAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyUserActivation");
  return native->NotifyUserActivation(env, base::android::JavaParamRef<jobject>(env, jcaller));
}


static base::subtle::AtomicWord g_org_chromium_content_browser_framehost_RenderFrameHostImpl_create
    = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_RenderFrameHostImpl_create(JNIEnv* env, jlong
    nativeRenderFrameHostAndroid,
    const base::android::JavaRef<jobject>& delegate,
    jboolean isIncognito,
    JniIntWrapper nativeInterfaceProviderHandle) {
  CHECK_CLAZZ(env, org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz(env),
      org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz(env),
          "create",
"(JLorg/chromium/content/browser/framehost/RenderFrameHostDelegate;ZI)Lorg/chromium/content/browser/framehost/RenderFrameHostImpl;",
          &g_org_chromium_content_browser_framehost_RenderFrameHostImpl_create);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz(env),
          method_id, nativeRenderFrameHostAndroid, delegate.obj(), isIncognito,
              as_jint(nativeInterfaceProviderHandle));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_framehost_RenderFrameHostImpl_clearNativePtr = 0;
static void Java_RenderFrameHostImpl_clearNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_framehost_RenderFrameHostImpl_clazz(env),
          "clearNativePtr",
          "()V",
          &g_org_chromium_content_browser_framehost_RenderFrameHostImpl_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace content

#endif  // org_chromium_content_browser_framehost_RenderFrameHostImpl_JNI
