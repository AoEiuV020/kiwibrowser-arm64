// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/accessibility/captioning/CaptioningController

#ifndef org_chromium_content_browser_accessibility_captioning_CaptioningController_JNI
#define org_chromium_content_browser_accessibility_captioning_CaptioningController_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_accessibility_captioning_CaptioningController[];
const char kClassPath_org_chromium_content_browser_accessibility_captioning_CaptioningController[] =
    "org/chromium/content/browser/accessibility/captioning/CaptioningController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz = 0;
#ifndef org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz_defined
#define org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz_defined
inline jclass
    org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_accessibility_captioning_CaptioningController,
      &g_org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_CaptioningController_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_content_browser_accessibility_captioning_CaptioningController_nativeInit(
    JNIEnv* env,
    jobject jcaller,
    jobject webContents) {
  return JNI_CaptioningController_Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_captioning_CaptioningController_nativeSetTextTrackSettings(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeCaptioningController,
    jboolean textTracksEnabled,
    jstring textTrackBackgroundColor,
    jstring textTrackFontFamily,
    jstring textTrackFontStyle,
    jstring textTrackFontVariant,
    jstring textTrackTextColor,
    jstring textTrackTextShadow,
    jstring textTrackTextSize) {
  CaptioningController* native =
      reinterpret_cast<CaptioningController*>(nativeCaptioningController);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTextTrackSettings");
  return native->SetTextTrackSettings(env, base::android::JavaParamRef<jobject>(env, jcaller),
      textTracksEnabled, base::android::JavaParamRef<jstring>(env, textTrackBackgroundColor),
      base::android::JavaParamRef<jstring>(env, textTrackFontFamily),
      base::android::JavaParamRef<jstring>(env, textTrackFontStyle),
      base::android::JavaParamRef<jstring>(env, textTrackFontVariant),
      base::android::JavaParamRef<jstring>(env, textTrackTextColor),
      base::android::JavaParamRef<jstring>(env, textTrackTextShadow),
      base::android::JavaParamRef<jstring>(env, textTrackTextSize));
}


static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_captioning_CaptioningController_onDestroy = 0;
static void Java_CaptioningController_onDestroy(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
              org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz(env),
          "onDestroy",
          "()V",
          &g_org_chromium_content_browser_accessibility_captioning_CaptioningController_onDestroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_captioning_CaptioningController_onRenderProcessChange
    = 0;
static void Java_CaptioningController_onRenderProcessChange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
              org_chromium_content_browser_accessibility_captioning_CaptioningController_clazz(env),
          "onRenderProcessChange",
          "()V",
&g_org_chromium_content_browser_accessibility_captioning_CaptioningController_onRenderProcessChange);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace content

#endif  // org_chromium_content_browser_accessibility_captioning_CaptioningController_JNI
