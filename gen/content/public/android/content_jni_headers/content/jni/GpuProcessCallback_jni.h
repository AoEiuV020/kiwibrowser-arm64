// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/GpuProcessCallback

#ifndef org_chromium_content_browser_GpuProcessCallback_JNI
#define org_chromium_content_browser_GpuProcessCallback_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_GpuProcessCallback[];
const char kClassPath_org_chromium_content_browser_GpuProcessCallback[] =
    "org/chromium/content/browser/GpuProcessCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_GpuProcessCallback_clazz = 0;
#ifndef org_chromium_content_browser_GpuProcessCallback_clazz_defined
#define org_chromium_content_browser_GpuProcessCallback_clazz_defined
inline jclass org_chromium_content_browser_GpuProcessCallback_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_GpuProcessCallback,
      &g_org_chromium_content_browser_GpuProcessCallback_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static void JNI_GpuProcessCallback_CompleteScopedSurfaceRequest(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& requestToken,
    const base::android::JavaParamRef<jobject>& surface);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_GpuProcessCallback_nativeCompleteScopedSurfaceRequest(
    JNIEnv* env,
    jclass jcaller,
    jobject requestToken,
    jobject surface) {
  return JNI_GpuProcessCallback_CompleteScopedSurfaceRequest(env,
      base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jobject>(env,
      requestToken), base::android::JavaParamRef<jobject>(env, surface));
}

static base::android::ScopedJavaLocalRef<jobject> JNI_GpuProcessCallback_GetViewSurface(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    jint surfaceId);

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_GpuProcessCallback_nativeGetViewSurface(
    JNIEnv* env,
    jclass jcaller,
    jint surfaceId) {
  return JNI_GpuProcessCallback_GetViewSurface(env, base::android::JavaParamRef<jclass>(env,
      jcaller), surfaceId).Release();
}


}  // namespace content

#endif  // org_chromium_content_browser_GpuProcessCallback_JNI
