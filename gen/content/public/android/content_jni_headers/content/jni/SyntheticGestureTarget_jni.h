// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/SyntheticGestureTarget

#ifndef org_chromium_content_browser_SyntheticGestureTarget_JNI
#define org_chromium_content_browser_SyntheticGestureTarget_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_SyntheticGestureTarget[];
const char kClassPath_org_chromium_content_browser_SyntheticGestureTarget[] =
    "org/chromium/content/browser/SyntheticGestureTarget";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_SyntheticGestureTarget_clazz = 0;
#ifndef org_chromium_content_browser_SyntheticGestureTarget_clazz_defined
#define org_chromium_content_browser_SyntheticGestureTarget_clazz_defined
inline jclass org_chromium_content_browser_SyntheticGestureTarget_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_SyntheticGestureTarget,
      &g_org_chromium_content_browser_SyntheticGestureTarget_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {


static base::subtle::AtomicWord g_org_chromium_content_browser_SyntheticGestureTarget_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_SyntheticGestureTarget_create(JNIEnv* env,
    const base::android::JavaRef<jobject>& target) {
  CHECK_CLAZZ(env, org_chromium_content_browser_SyntheticGestureTarget_clazz(env),
      org_chromium_content_browser_SyntheticGestureTarget_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_SyntheticGestureTarget_clazz(env),
          "create",
          "(Landroid/view/View;)Lorg/chromium/content/browser/SyntheticGestureTarget;",
          &g_org_chromium_content_browser_SyntheticGestureTarget_create);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_content_browser_SyntheticGestureTarget_clazz(env),
          method_id, target.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_content_browser_SyntheticGestureTarget_inject = 0;
static void Java_SyntheticGestureTarget_inject(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper action,
    JniIntWrapper pointerCount,
    jlong timeInMs) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_SyntheticGestureTarget_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_SyntheticGestureTarget_clazz(env),
          "inject",
          "(IIJ)V",
          &g_org_chromium_content_browser_SyntheticGestureTarget_inject);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(action), as_jint(pointerCount), timeInMs);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_content_browser_SyntheticGestureTarget_setPointer =
    0;
static void Java_SyntheticGestureTarget_setPointer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper index,
    JniIntWrapper x,
    JniIntWrapper y,
    JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_SyntheticGestureTarget_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_SyntheticGestureTarget_clazz(env),
          "setPointer",
          "(IIII)V",
          &g_org_chromium_content_browser_SyntheticGestureTarget_setPointer);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(index), as_jint(x), as_jint(y), as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_SyntheticGestureTarget_setScrollDeltas = 0;
static void Java_SyntheticGestureTarget_setScrollDeltas(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper x,
    JniIntWrapper y,
    JniIntWrapper dx,
    JniIntWrapper dy) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_SyntheticGestureTarget_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_SyntheticGestureTarget_clazz(env),
          "setScrollDeltas",
          "(IIII)V",
          &g_org_chromium_content_browser_SyntheticGestureTarget_setScrollDeltas);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(x), as_jint(y), as_jint(dx), as_jint(dy));
  jni_generator::CheckException(env);
}

}  // namespace content

#endif  // org_chromium_content_browser_SyntheticGestureTarget_JNI
