// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/androidoverlay/DialogOverlayImpl

#ifndef org_chromium_content_browser_androidoverlay_DialogOverlayImpl_JNI
#define org_chromium_content_browser_androidoverlay_DialogOverlayImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_androidoverlay_DialogOverlayImpl[];
const char kClassPath_org_chromium_content_browser_androidoverlay_DialogOverlayImpl[] =
    "org/chromium/content/browser/androidoverlay/DialogOverlayImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz = 0;
#ifndef org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz_defined
#define org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz_defined
inline jclass org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_androidoverlay_DialogOverlayImpl,
      &g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_DialogOverlayImpl_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jlong high,
    jlong low,
    jboolean isPowerEfficient);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_nativeInit(
    JNIEnv* env,
    jobject jcaller,
    jlong high,
    jlong low,
    jboolean isPowerEfficient) {
  return JNI_DialogOverlayImpl_Init(env, base::android::JavaParamRef<jobject>(env, jcaller), high,
      low, isPowerEfficient);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_nativeCompleteInit(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeDialogOverlayImpl) {
  DialogOverlayImpl* native = reinterpret_cast<DialogOverlayImpl*>(nativeDialogOverlayImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "CompleteInit");
  return native->CompleteInit(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeDialogOverlayImpl) {
  DialogOverlayImpl* native = reinterpret_cast<DialogOverlayImpl*>(nativeDialogOverlayImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_nativeGetCompositorOffset(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeDialogOverlayImpl,
    jobject rect) {
  DialogOverlayImpl* native = reinterpret_cast<DialogOverlayImpl*>(nativeDialogOverlayImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCompositorOffset");
  return native->GetCompositorOffset(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, rect));
}

static jint JNI_DialogOverlayImpl_RegisterSurface(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& surface);

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_nativeRegisterSurface(
    JNIEnv* env,
    jclass jcaller,
    jobject surface) {
  return JNI_DialogOverlayImpl_RegisterSurface(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, surface));
}

static void JNI_DialogOverlayImpl_UnregisterSurface(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jint surfaceId);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_nativeUnregisterSurface(
    JNIEnv* env,
    jclass jcaller,
    jint surfaceId) {
  return JNI_DialogOverlayImpl_UnregisterSurface(env, base::android::JavaParamRef<jclass>(env,
      jcaller), surfaceId);
}

static base::android::ScopedJavaLocalRef<jobject>
    JNI_DialogOverlayImpl_LookupSurfaceForTesting(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jint surfaceId);

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_nativeLookupSurfaceForTesting(
    JNIEnv* env,
    jclass jcaller,
    jint surfaceId) {
  return JNI_DialogOverlayImpl_LookupSurfaceForTesting(env, base::android::JavaParamRef<jclass>(env,
      jcaller), surfaceId).Release();
}


static base::subtle::AtomicWord
    g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_receiveCompositorOffset = 0;
static void Java_DialogOverlayImpl_receiveCompositorOffset(JNIEnv* env, const
    base::android::JavaRef<jobject>& rect,
    JniIntWrapper x,
    JniIntWrapper y) {
  CHECK_CLAZZ(env, org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env),
      org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env),
          "receiveCompositorOffset",
          "(Lorg/chromium/gfx/mojom/Rect;II)V",
          &g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_receiveCompositorOffset);

env->CallStaticVoidMethod(org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env),
          method_id, rect.obj(), as_jint(x), as_jint(y));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_onWindowToken = 0;
static void Java_DialogOverlayImpl_onWindowToken(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& token) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env),
          "onWindowToken",
          "(Landroid/os/IBinder;)V",
          &g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_onWindowToken);

     env->CallVoidMethod(obj.obj(),
          method_id, token.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_onDismissed = 0;
static void Java_DialogOverlayImpl_onDismissed(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env),
          "onDismissed",
          "()V",
          &g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_onDismissed);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_onPowerEfficientState = 0;
static void Java_DialogOverlayImpl_onPowerEfficientState(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isPowerEfficient) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_androidoverlay_DialogOverlayImpl_clazz(env),
          "onPowerEfficientState",
          "(Z)V",
          &g_org_chromium_content_browser_androidoverlay_DialogOverlayImpl_onPowerEfficientState);

     env->CallVoidMethod(obj.obj(),
          method_id, isPowerEfficient);
  jni_generator::CheckException(env);
}

}  // namespace content

#endif  // org_chromium_content_browser_androidoverlay_DialogOverlayImpl_JNI
