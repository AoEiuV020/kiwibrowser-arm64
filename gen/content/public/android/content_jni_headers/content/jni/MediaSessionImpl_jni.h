// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/MediaSessionImpl

#ifndef org_chromium_content_browser_MediaSessionImpl_JNI
#define org_chromium_content_browser_MediaSessionImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_MediaSessionImpl[];
const char kClassPath_org_chromium_content_browser_MediaSessionImpl[] =
    "org/chromium/content/browser/MediaSessionImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_MediaSessionImpl_clazz = 0;
#ifndef org_chromium_content_browser_MediaSessionImpl_clazz_defined
#define org_chromium_content_browser_MediaSessionImpl_clazz_defined
inline jclass org_chromium_content_browser_MediaSessionImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_content_browser_MediaSessionImpl,
      &g_org_chromium_content_browser_MediaSessionImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_MediaSessionImpl_nativeResume(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid) {
  MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Resume");
  return native->Resume(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_MediaSessionImpl_nativeSuspend(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid) {
  MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Suspend");
  return native->Suspend(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_MediaSessionImpl_nativeStop(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid) {
  MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Stop");
  return native->Stop(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_MediaSessionImpl_nativeSeekForward(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid,
    jlong millis) {
  MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SeekForward");
  return native->SeekForward(env, base::android::JavaParamRef<jobject>(env, jcaller), millis);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_MediaSessionImpl_nativeSeekBackward(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid,
    jlong millis) {
  MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SeekBackward");
  return native->SeekBackward(env, base::android::JavaParamRef<jobject>(env, jcaller), millis);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_MediaSessionImpl_nativeDidReceiveAction(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid,
    jint action) {
  MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidReceiveAction");
  return native->DidReceiveAction(env, base::android::JavaParamRef<jobject>(env, jcaller), action);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_MediaSessionImpl_nativeRequestSystemAudioFocus(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid) {
  MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestSystemAudioFocus");
  return native->RequestSystemAudioFocus(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::android::ScopedJavaLocalRef<jobject>
    JNI_MediaSessionImpl_GetMediaSessionFromWebContents(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& contents);

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_MediaSessionImpl_nativeGetMediaSessionFromWebContents(
    JNIEnv* env,
    jclass jcaller,
    jobject contents) {
  return JNI_MediaSessionImpl_GetMediaSessionFromWebContents(env,
      base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jobject>(env,
      contents)).Release();
}


static base::subtle::AtomicWord g_org_chromium_content_browser_MediaSessionImpl_hasObservers = 0;
static jboolean Java_MediaSessionImpl_hasObservers(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_MediaSessionImpl_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_MediaSessionImpl_clazz(env),
          "hasObservers",
          "()Z",
          &g_org_chromium_content_browser_MediaSessionImpl_hasObservers);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_MediaSessionImpl_mediaSessionDestroyed = 0;
static void Java_MediaSessionImpl_mediaSessionDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_MediaSessionImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_MediaSessionImpl_clazz(env),
          "mediaSessionDestroyed",
          "()V",
          &g_org_chromium_content_browser_MediaSessionImpl_mediaSessionDestroyed);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_MediaSessionImpl_mediaSessionStateChanged = 0;
static void Java_MediaSessionImpl_mediaSessionStateChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isControllable,
    jboolean isSuspended) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_MediaSessionImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_MediaSessionImpl_clazz(env),
          "mediaSessionStateChanged",
          "(ZZ)V",
          &g_org_chromium_content_browser_MediaSessionImpl_mediaSessionStateChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, isControllable, isSuspended);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_MediaSessionImpl_mediaSessionMetadataChanged = 0;
static void Java_MediaSessionImpl_mediaSessionMetadataChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& metadata) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_MediaSessionImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_MediaSessionImpl_clazz(env),
          "mediaSessionMetadataChanged",
          "(Lorg/chromium/content_public/common/MediaMetadata;)V",
          &g_org_chromium_content_browser_MediaSessionImpl_mediaSessionMetadataChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, metadata.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_MediaSessionImpl_mediaSessionActionsChanged = 0;
static void Java_MediaSessionImpl_mediaSessionActionsChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jintArray>& actions) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_MediaSessionImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_MediaSessionImpl_clazz(env),
          "mediaSessionActionsChanged",
          "([I)V",
          &g_org_chromium_content_browser_MediaSessionImpl_mediaSessionActionsChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, actions.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_content_browser_MediaSessionImpl_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_MediaSessionImpl_create(JNIEnv* env, jlong
    nativeMediaSession) {
  CHECK_CLAZZ(env, org_chromium_content_browser_MediaSessionImpl_clazz(env),
      org_chromium_content_browser_MediaSessionImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_MediaSessionImpl_clazz(env),
          "create",
          "(J)Lorg/chromium/content/browser/MediaSessionImpl;",
          &g_org_chromium_content_browser_MediaSessionImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_content_browser_MediaSessionImpl_clazz(env),
          method_id, nativeMediaSession);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace content

#endif  // org_chromium_content_browser_MediaSessionImpl_JNI
