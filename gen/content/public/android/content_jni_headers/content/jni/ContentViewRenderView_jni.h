// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentViewRenderView

#ifndef org_chromium_content_browser_ContentViewRenderView_JNI
#define org_chromium_content_browser_ContentViewRenderView_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_ContentViewRenderView[];
const char kClassPath_org_chromium_content_browser_ContentViewRenderView[] =
    "org/chromium/content/browser/ContentViewRenderView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_ContentViewRenderView_clazz = 0;
#ifndef org_chromium_content_browser_ContentViewRenderView_clazz_defined
#define org_chromium_content_browser_ContentViewRenderView_clazz_defined
inline jclass org_chromium_content_browser_ContentViewRenderView_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_ContentViewRenderView,
      &g_org_chromium_content_browser_ContentViewRenderView_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_ContentViewRenderView_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& rootWindow);

JNI_GENERATOR_EXPORT jlong Java_org_chromium_content_browser_ContentViewRenderView_nativeInit(
    JNIEnv* env,
    jobject jcaller,
    jobject rootWindow) {
  return JNI_ContentViewRenderView_Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, rootWindow));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_ContentViewRenderView_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewRenderView) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ContentViewRenderView_nativeSetCurrentWebContents(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewRenderView,
    jobject webContents) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCurrentWebContents");
  return native->SetCurrentWebContents(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ContentViewRenderView_nativeOnPhysicalBackingSizeChanged(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewRenderView,
    jobject webContents,
    jint width,
    jint height) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPhysicalBackingSizeChanged");
  return native->OnPhysicalBackingSizeChanged(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents), width, height);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ContentViewRenderView_nativeSetNeedsComposite(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewRenderView) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetNeedsComposite");
  return native->SetNeedsComposite(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ContentViewRenderView_nativeSurfaceCreated(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewRenderView) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceCreated");
  return native->SurfaceCreated(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ContentViewRenderView_nativeSurfaceDestroyed(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewRenderView) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceDestroyed");
  return native->SurfaceDestroyed(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ContentViewRenderView_nativeSurfaceChanged(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewRenderView,
    jint format,
    jint width,
    jint height,
    jobject surface) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceChanged");
  return native->SurfaceChanged(env, base::android::JavaParamRef<jobject>(env, jcaller), format,
      width, height, base::android::JavaParamRef<jobject>(env, surface));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ContentViewRenderView_nativeSetOverlayVideoMode(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewRenderView,
    jboolean enabled) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetOverlayVideoMode");
  return native->SetOverlayVideoMode(env, base::android::JavaParamRef<jobject>(env, jcaller),
      enabled);
}


static base::subtle::AtomicWord g_org_chromium_content_browser_ContentViewRenderView_didSwapFrame =
    0;
static void Java_ContentViewRenderView_didSwapFrame(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContentViewRenderView_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_ContentViewRenderView_clazz(env),
          "didSwapFrame",
          "()V",
          &g_org_chromium_content_browser_ContentViewRenderView_didSwapFrame);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace content

#endif  // org_chromium_content_browser_ContentViewRenderView_JNI
