// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/AudioFocusDelegate

#ifndef org_chromium_content_browser_AudioFocusDelegate_JNI
#define org_chromium_content_browser_AudioFocusDelegate_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_AudioFocusDelegate[];
const char kClassPath_org_chromium_content_browser_AudioFocusDelegate[] =
    "org/chromium/content/browser/AudioFocusDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_AudioFocusDelegate_clazz = 0;
#ifndef org_chromium_content_browser_AudioFocusDelegate_clazz_defined
#define org_chromium_content_browser_AudioFocusDelegate_clazz_defined
inline jclass org_chromium_content_browser_AudioFocusDelegate_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_AudioFocusDelegate,
      &g_org_chromium_content_browser_AudioFocusDelegate_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnSuspend(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid) {
  AudioFocusDelegateAndroid* native =
      reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSuspend");
  return native->OnSuspend(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnResume(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid) {
  AudioFocusDelegateAndroid* native =
      reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnResume");
  return native->OnResume(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnStartDucking(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid) {
  AudioFocusDelegateAndroid* native =
      reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnStartDucking");
  return native->OnStartDucking(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnStopDucking(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid) {
  AudioFocusDelegateAndroid* native =
      reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnStopDucking");
  return native->OnStopDucking(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_AudioFocusDelegate_nativeRecordSessionDuck(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid) {
  AudioFocusDelegateAndroid* native =
      reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RecordSessionDuck");
  return native->RecordSessionDuck(env, base::android::JavaParamRef<jobject>(env, jcaller));
}


static base::subtle::AtomicWord g_org_chromium_content_browser_AudioFocusDelegate_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_AudioFocusDelegate_create(JNIEnv* env, jlong
    nativeAudioFocusDelegateAndroid) {
  CHECK_CLAZZ(env, org_chromium_content_browser_AudioFocusDelegate_clazz(env),
      org_chromium_content_browser_AudioFocusDelegate_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_AudioFocusDelegate_clazz(env),
          "create",
          "(J)Lorg/chromium/content/browser/AudioFocusDelegate;",
          &g_org_chromium_content_browser_AudioFocusDelegate_create);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_content_browser_AudioFocusDelegate_clazz(env),
          method_id, nativeAudioFocusDelegateAndroid);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_content_browser_AudioFocusDelegate_tearDown = 0;
static void Java_AudioFocusDelegate_tearDown(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_AudioFocusDelegate_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_AudioFocusDelegate_clazz(env),
          "tearDown",
          "()V",
          &g_org_chromium_content_browser_AudioFocusDelegate_tearDown);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_content_browser_AudioFocusDelegate_requestAudioFocus
    = 0;
static jboolean Java_AudioFocusDelegate_requestAudioFocus(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean transientFocus) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_AudioFocusDelegate_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_AudioFocusDelegate_clazz(env),
          "requestAudioFocus",
          "(Z)Z",
          &g_org_chromium_content_browser_AudioFocusDelegate_requestAudioFocus);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, transientFocus);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_content_browser_AudioFocusDelegate_abandonAudioFocus
    = 0;
static void Java_AudioFocusDelegate_abandonAudioFocus(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_AudioFocusDelegate_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_AudioFocusDelegate_clazz(env),
          "abandonAudioFocus",
          "()V",
          &g_org_chromium_content_browser_AudioFocusDelegate_abandonAudioFocus);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace content

#endif  // org_chromium_content_browser_AudioFocusDelegate_JNI
