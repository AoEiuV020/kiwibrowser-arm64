// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/AppWebMessagePort

#ifndef org_chromium_content_browser_AppWebMessagePort_JNI
#define org_chromium_content_browser_AppWebMessagePort_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_AppWebMessagePort[];
const char kClassPath_org_chromium_content_browser_AppWebMessagePort[] =
    "org/chromium/content/browser/AppWebMessagePort";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_AppWebMessagePort_clazz = 0;
#ifndef org_chromium_content_browser_AppWebMessagePort_clazz_defined
#define org_chromium_content_browser_AppWebMessagePort_clazz_defined
inline jclass org_chromium_content_browser_AppWebMessagePort_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_content_browser_AppWebMessagePort,
      &g_org_chromium_content_browser_AppWebMessagePort_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static base::android::ScopedJavaLocalRef<jstring> JNI_AppWebMessagePort_DecodeStringMessage(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jbyteArray>& encodedData);

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_content_browser_AppWebMessagePort_nativeDecodeStringMessage(
    JNIEnv* env,
    jclass jcaller,
    jbyteArray encodedData) {
  return JNI_AppWebMessagePort_DecodeStringMessage(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jbyteArray>(env, encodedData)).Release();
}

static base::android::ScopedJavaLocalRef<jbyteArray>
    JNI_AppWebMessagePort_EncodeStringMessage(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& message);

JNI_GENERATOR_EXPORT jbyteArray
    Java_org_chromium_content_browser_AppWebMessagePort_nativeEncodeStringMessage(
    JNIEnv* env,
    jclass jcaller,
    jstring message) {
  return JNI_AppWebMessagePort_EncodeStringMessage(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, message)).Release();
}


static base::subtle::AtomicWord g_org_chromium_content_browser_AppWebMessagePort_releaseNativeHandle
    = 0;
static jint Java_AppWebMessagePort_releaseNativeHandle(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_AppWebMessagePort_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_AppWebMessagePort_clazz(env),
          "releaseNativeHandle",
          "()I",
          &g_org_chromium_content_browser_AppWebMessagePort_releaseNativeHandle);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace content

#endif  // org_chromium_content_browser_AppWebMessagePort_JNI
