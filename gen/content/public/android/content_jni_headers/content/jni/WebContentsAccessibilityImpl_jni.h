// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/accessibility/WebContentsAccessibilityImpl

#ifndef org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_JNI
#define org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl[];
const char kClassPath_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl[] =
    "org/chromium/content/browser/accessibility/WebContentsAccessibilityImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz = 0;
#ifndef org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz_defined
#define org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz_defined
inline jclass org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl,
      &g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_WebContentsAccessibilityImpl_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeInit(
    JNIEnv* env,
    jobject jcaller,
    jobject webContents) {
  return JNI_WebContentsAccessibilityImpl_Init(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeOnAutofillPopupDisplayed(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAutofillPopupDisplayed");
  return native->OnAutofillPopupDisplayed(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeOnAutofillPopupDismissed(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAutofillPopupDismissed");
  return native->OnAutofillPopupDismissed(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeGetIdForElementAfterElementHostingAutofillPopup(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetIdForElementAfterElementHostingAutofillPopup", 0);
  return native->GetIdForElementAfterElementHostingAutofillPopup(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeGetRootId(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRootId", 0);
  return native->GetRootId(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeIsNodeValid(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsNodeValid", false);
  return native->IsNodeValid(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeIsAutofillPopupNode(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsAutofillPopupNode", false);
  return native->IsAutofillPopupNode(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeIsEditableText(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsEditableText", false);
  return native->IsEditableText(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeIsFocused(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsFocused", false);
  return native->IsFocused(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeGetEditableTextSelectionStart(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEditableTextSelectionStart", 0);
  return native->GetEditableTextSelectionStart(env, base::android::JavaParamRef<jobject>(env,
      jcaller), id);
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeGetEditableTextSelectionEnd(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEditableTextSelectionEnd", 0);
  return native->GetEditableTextSelectionEnd(env, base::android::JavaParamRef<jobject>(env,
      jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativePopulateAccessibilityNodeInfo(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jobject info,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateAccessibilityNodeInfo", false);
  return native->PopulateAccessibilityNodeInfo(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, info), id);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativePopulateAccessibilityEvent(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jobject event,
    jint id,
    jint eventType) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateAccessibilityEvent", false);
  return native->PopulateAccessibilityEvent(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, event), id, eventType);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeClick(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Click");
  return native->Click(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeFocus(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Focus");
  return native->Focus(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeBlur(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Blur");
  return native->Blur(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeScrollToMakeNodeVisible(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollToMakeNodeVisible");
  return native->ScrollToMakeNodeVisible(env, base::android::JavaParamRef<jobject>(env, jcaller),
      id);
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeFindElementType(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint startId,
    jstring elementType,
    jboolean forwards) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FindElementType", 0);
  return native->FindElementType(env, base::android::JavaParamRef<jobject>(env, jcaller), startId,
      base::android::JavaParamRef<jstring>(env, elementType), forwards);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeSetTextFieldValue(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jstring newValue) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTextFieldValue");
  return native->SetTextFieldValue(env, base::android::JavaParamRef<jobject>(env, jcaller), id,
      base::android::JavaParamRef<jstring>(env, newValue));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeSetSelection(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jint start,
    jint end) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSelection");
  return native->SetSelection(env, base::android::JavaParamRef<jobject>(env, jcaller), id, start,
      end);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeNextAtGranularity(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint selectionGranularity,
    jboolean extendSelection,
    jint id,
    jint cursorIndex) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NextAtGranularity", false);
  return native->NextAtGranularity(env, base::android::JavaParamRef<jobject>(env, jcaller),
      selectionGranularity, extendSelection, id, cursorIndex);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativePreviousAtGranularity(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint selectionGranularity,
    jboolean extendSelection,
    jint id,
    jint cursorIndex) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PreviousAtGranularity", false);
  return native->PreviousAtGranularity(env, base::android::JavaParamRef<jobject>(env, jcaller),
      selectionGranularity, extendSelection, id, cursorIndex);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeAdjustSlider(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jboolean increment) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AdjustSlider", false);
  return native->AdjustSlider(env, base::android::JavaParamRef<jobject>(env, jcaller), id,
      increment);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeMoveAccessibilityFocus(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint oldId,
    jint newId) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "MoveAccessibilityFocus");
  return native->MoveAccessibilityFocus(env, base::android::JavaParamRef<jobject>(env, jcaller),
      oldId, newId);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeIsSlider(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSlider", false);
  return native->IsSlider(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeScroll(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jint direction) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Scroll", false);
  return native->Scroll(env, base::android::JavaParamRef<jobject>(env, jcaller), id, direction);
}

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeGetSupportedHtmlElementTypes(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSupportedHtmlElementTypes", NULL);
  return native->GetSupportedHtmlElementTypes(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeShowContextMenu(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowContextMenu");
  return native->ShowContextMenu(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeIsEnabled(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsEnabled", false);
  return native->IsEnabled(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeEnable(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Enable");
  return native->Enable(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeAreInlineTextBoxesLoaded(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AreInlineTextBoxesLoaded", false);
  return native->AreInlineTextBoxesLoaded(env, base::android::JavaParamRef<jobject>(env, jcaller),
      id);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeLoadInlineTextBoxes(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadInlineTextBoxes");
  return native->LoadInlineTextBoxes(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jintArray
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeGetCharacterBoundingBoxes(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jint start,
    jint len) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCharacterBoundingBoxes", NULL);
  return native->GetCharacterBoundingBoxes(env, base::android::JavaParamRef<jobject>(env, jcaller),
      id, start, len).Release();
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_nativeGetTextLength(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTextLength", 0);
  return native->GetTextLength(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}


static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_onNativeObjectDestroyed
    = 0;
static void Java_WebContentsAccessibilityImpl_onNativeObjectDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "onNativeObjectDestroyed",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_onNativeObjectDestroyed);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_onHoverEvent = 0;
static jboolean Java_WebContentsAccessibilityImpl_onHoverEvent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper action) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "onHoverEvent",
          "(I)Z",
          &g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_onHoverEvent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(action));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_notifyFrameInfoInitialized
    = 0;
static void Java_WebContentsAccessibilityImpl_notifyFrameInfoInitialized(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "notifyFrameInfoInitialized",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_notifyFrameInfoInitialized);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_finishGranularityMove
    = 0;
static void Java_WebContentsAccessibilityImpl_finishGranularityMove(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& text,
    jboolean extendSelection,
    JniIntWrapper itemStartIndex,
    JniIntWrapper itemEndIndex,
    jboolean forwards) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "finishGranularityMove",
          "(Ljava/lang/String;ZIIZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_finishGranularityMove);

     env->CallVoidMethod(obj.obj(),
          method_id, text.obj(), extendSelection, as_jint(itemStartIndex), as_jint(itemEndIndex),
              forwards);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_sendDelayedWindowContentChangedEvent
    = 0;
static void Java_WebContentsAccessibilityImpl_sendDelayedWindowContentChangedEvent(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "sendDelayedWindowContentChangedEvent",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_sendDelayedWindowContentChangedEvent);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handlePageLoaded = 0;
static void Java_WebContentsAccessibilityImpl_handlePageLoaded(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handlePageLoaded",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handlePageLoaded);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleFocusChanged =
    0;
static void Java_WebContentsAccessibilityImpl_handleFocusChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleFocusChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleFocusChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleCheckStateChanged
    = 0;
static void Java_WebContentsAccessibilityImpl_handleCheckStateChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleCheckStateChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleCheckStateChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleClicked = 0;
static void Java_WebContentsAccessibilityImpl_handleClicked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleClicked",
          "(I)V",
          &g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleClicked);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleTextSelectionChanged
    = 0;
static void Java_WebContentsAccessibilityImpl_handleTextSelectionChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleTextSelectionChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleTextSelectionChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleEditableTextChanged
    = 0;
static void Java_WebContentsAccessibilityImpl_handleEditableTextChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleEditableTextChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleEditableTextChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleSliderChanged =
    0;
static void Java_WebContentsAccessibilityImpl_handleSliderChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleSliderChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleSliderChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleContentChanged =
    0;
static void Java_WebContentsAccessibilityImpl_handleContentChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleContentChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleContentChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleNavigate = 0;
static void Java_WebContentsAccessibilityImpl_handleNavigate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleNavigate",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleNavigate);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleScrollPositionChanged
    = 0;
static void Java_WebContentsAccessibilityImpl_handleScrollPositionChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleScrollPositionChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleScrollPositionChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleScrolledToAnchor
    = 0;
static void Java_WebContentsAccessibilityImpl_handleScrolledToAnchor(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleScrolledToAnchor",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleScrolledToAnchor);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleHover = 0;
static void Java_WebContentsAccessibilityImpl_handleHover(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "handleHover",
          "(I)V",
          &g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleHover);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_announceLiveRegionText
    = 0;
static void Java_WebContentsAccessibilityImpl_announceLiveRegionText(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& text) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "announceLiveRegionText",
          "(Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_announceLiveRegionText);

     env->CallVoidMethod(obj.obj(),
          method_id, text.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoParent
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoParent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper parentId) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoParent",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoParent);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), as_jint(parentId));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_addAccessibilityNodeInfoChild
    = 0;
static void Java_WebContentsAccessibilityImpl_addAccessibilityNodeInfoChild(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper childId) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "addAccessibilityNodeInfoChild",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_addAccessibilityNodeInfoChild);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), as_jint(childId));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBooleanAttributes
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBooleanAttributes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper virtualViewId,
    jboolean checkable,
    jboolean checked,
    jboolean clickable,
    jboolean enabled,
    jboolean focusable,
    jboolean focused,
    jboolean password,
    jboolean scrollable,
    jboolean selected,
    jboolean visibleToUser) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoBooleanAttributes",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;IZZZZZZZZZZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBooleanAttributes);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), as_jint(virtualViewId), checkable, checked, clickable, enabled,
              focusable, focused, password, scrollable, selected, visibleToUser);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_addAccessibilityNodeInfoActions
    = 0;
static void Java_WebContentsAccessibilityImpl_addAccessibilityNodeInfoActions(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper virtualViewId,
    jboolean canScrollForward,
    jboolean canScrollBackward,
    jboolean canScrollUp,
    jboolean canScrollDown,
    jboolean canScrollLeft,
    jboolean canScrollRight,
    jboolean clickable,
    jboolean editableText,
    jboolean enabled,
    jboolean focusable,
    jboolean focused,
    jboolean isCollapsed,
    jboolean isExpanded,
    jboolean hasNonEmptyValue) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "addAccessibilityNodeInfoActions",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;IZZZZZZZZZZZZZZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_addAccessibilityNodeInfoActions);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), as_jint(virtualViewId), canScrollForward, canScrollBackward,
              canScrollUp, canScrollDown, canScrollLeft, canScrollRight, clickable, editableText,
              enabled, focusable, focused, isCollapsed, isExpanded, hasNonEmptyValue);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoClassName
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoClassName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jstring>& className) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoClassName",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoClassName);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), className.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoText
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoText(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jstring>& text,
    jboolean annotateAsLink,
    jboolean isEditableText,
    const base::android::JavaRef<jstring>& language) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoText",
"(Landroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;ZZLjava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoText);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), text.obj(), annotateAsLink, isEditableText, language.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLocation
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLocation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper virtualViewId,
    JniIntWrapper absoluteLeft,
    JniIntWrapper absoluteTop,
    JniIntWrapper parentRelativeLeft,
    JniIntWrapper parentRelativeTop,
    JniIntWrapper width,
    JniIntWrapper height,
    jboolean isRootNode) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoLocation",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;IIIIIIIZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLocation);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), as_jint(virtualViewId), as_jint(absoluteLeft),
              as_jint(absoluteTop), as_jint(parentRelativeLeft), as_jint(parentRelativeTop),
              as_jint(width), as_jint(height), isRootNode);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoKitKatAttributes
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoKitKatAttributes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    jboolean isRoot,
    jboolean isEditableText,
    const base::android::JavaRef<jstring>& role,
    const base::android::JavaRef<jstring>& roleDescription,
    const base::android::JavaRef<jstring>& hint,
    JniIntWrapper selectionStartIndex,
    JniIntWrapper selectionEndIndex,
    jboolean hasImage) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoKitKatAttributes",
"(Landroid/view/accessibility/AccessibilityNodeInfo;ZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;IIZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoKitKatAttributes);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), isRoot, isEditableText, role.obj(), roleDescription.obj(),
              hint.obj(), as_jint(selectionStartIndex), as_jint(selectionEndIndex), hasImage);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLollipopAttributes
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLollipopAttributes(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    jboolean canOpenPopup,
    jboolean contentInvalid,
    jboolean dismissable,
    jboolean multiLine,
    JniIntWrapper inputType,
    JniIntWrapper liveRegion) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoLollipopAttributes",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;ZZZZII)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLollipopAttributes);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), canOpenPopup, contentInvalid, dismissable, multiLine,
              as_jint(inputType), as_jint(liveRegion));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionInfo
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionInfo(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper rowCount,
    JniIntWrapper columnCount,
    jboolean hierarchical) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoCollectionInfo",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;IIZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionInfo);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), as_jint(rowCount), as_jint(columnCount), hierarchical);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionItemInfo
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionItemInfo(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper rowIndex,
    JniIntWrapper rowSpan,
    JniIntWrapper columnIndex,
    JniIntWrapper columnSpan,
    jboolean heading) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoCollectionItemInfo",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;IIIIZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionItemInfo);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), as_jint(rowIndex), as_jint(rowSpan), as_jint(columnIndex),
              as_jint(columnSpan), heading);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoRangeInfo
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoRangeInfo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper rangeType,
    jfloat min,
    jfloat max,
    jfloat current) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoRangeInfo",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;IFFF)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoRangeInfo);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), as_jint(rangeType), min, max, current);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoViewIdResourceName
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoViewIdResourceName(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jstring>& viewIdResourceName) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoViewIdResourceName",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoViewIdResourceName);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), viewIdResourceName.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoOAttributes
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoOAttributes(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    jboolean hasCharacterLocations) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityNodeInfoOAttributes",
          "(Landroid/view/accessibility/AccessibilityNodeInfo;Z)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoOAttributes);

     env->CallVoidMethod(obj.obj(),
          method_id, node.obj(), hasCharacterLocations);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventBooleanAttributes
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventBooleanAttributes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    jboolean checked,
    jboolean enabled,
    jboolean password,
    jboolean scrollable) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventBooleanAttributes",
          "(Landroid/view/accessibility/AccessibilityEvent;ZZZZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventBooleanAttributes);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), checked, enabled, password, scrollable);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventClassName
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventClassName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    const base::android::JavaRef<jstring>& className) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventClassName",
          "(Landroid/view/accessibility/AccessibilityEvent;Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventClassName);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), className.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventListAttributes
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventListAttributes(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper currentItemIndex,
    JniIntWrapper itemCount) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventListAttributes",
          "(Landroid/view/accessibility/AccessibilityEvent;II)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventListAttributes);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), as_jint(currentItemIndex), as_jint(itemCount));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventScrollAttributes
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventScrollAttributes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper scrollX,
    JniIntWrapper scrollY,
    JniIntWrapper maxScrollX,
    JniIntWrapper maxScrollY) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventScrollAttributes",
          "(Landroid/view/accessibility/AccessibilityEvent;IIII)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventScrollAttributes);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), as_jint(scrollX), as_jint(scrollY), as_jint(maxScrollX),
              as_jint(maxScrollY));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventTextChangedAttrs
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventTextChangedAttrs(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper fromIndex,
    JniIntWrapper addedCount,
    JniIntWrapper removedCount,
    const base::android::JavaRef<jstring>& beforeText,
    const base::android::JavaRef<jstring>& text) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventTextChangedAttrs",
"(Landroid/view/accessibility/AccessibilityEvent;IIILjava/lang/String;Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventTextChangedAttrs);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), as_jint(fromIndex), as_jint(addedCount), as_jint(removedCount),
              beforeText.obj(), text.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventSelectionAttrs
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventSelectionAttrs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper fromIndex,
    JniIntWrapper toIndex,
    JniIntWrapper itemCount,
    const base::android::JavaRef<jstring>& text) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventSelectionAttrs",
          "(Landroid/view/accessibility/AccessibilityEvent;IIILjava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventSelectionAttrs);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), as_jint(fromIndex), as_jint(toIndex), as_jint(itemCount),
              text.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventLollipopAttributes
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventLollipopAttributes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    jboolean canOpenPopup,
    jboolean contentInvalid,
    jboolean dismissable,
    jboolean multiLine,
    JniIntWrapper inputType,
    JniIntWrapper liveRegion) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventLollipopAttributes",
          "(Landroid/view/accessibility/AccessibilityEvent;ZZZZII)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventLollipopAttributes);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), canOpenPopup, contentInvalid, dismissable, multiLine,
              as_jint(inputType), as_jint(liveRegion));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventCollectionInfo
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventCollectionInfo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper rowCount,
    JniIntWrapper columnCount,
    jboolean hierarchical) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventCollectionInfo",
          "(Landroid/view/accessibility/AccessibilityEvent;IIZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventCollectionInfo);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), as_jint(rowCount), as_jint(columnCount), hierarchical);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventHeadingFlag
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventHeadingFlag(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    jboolean heading) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventHeadingFlag",
          "(Landroid/view/accessibility/AccessibilityEvent;Z)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventHeadingFlag);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), heading);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventCollectionItemInfo
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventCollectionItemInfo(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper rowIndex,
    JniIntWrapper rowSpan,
    JniIntWrapper columnIndex,
    JniIntWrapper columnSpan) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventCollectionItemInfo",
          "(Landroid/view/accessibility/AccessibilityEvent;IIII)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventCollectionItemInfo);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), as_jint(rowIndex), as_jint(rowSpan), as_jint(columnIndex),
              as_jint(columnSpan));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventRangeInfo
    = 0;
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventRangeInfo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper rangeType,
    jfloat min,
    jfloat max,
    jfloat current) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "setAccessibilityEventRangeInfo",
          "(Landroid/view/accessibility/AccessibilityEvent;IFFF)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventRangeInfo);

     env->CallVoidMethod(obj.obj(),
          method_id, event.obj(), as_jint(rangeType), min, max, current);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_shouldRespectDisplayedPasswordText
    = 0;
static jboolean Java_WebContentsAccessibilityImpl_shouldRespectDisplayedPasswordText(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "shouldRespectDisplayedPasswordText",
          "()Z",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_shouldRespectDisplayedPasswordText);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_shouldExposePasswordText
    = 0;
static jboolean Java_WebContentsAccessibilityImpl_shouldExposePasswordText(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "shouldExposePasswordText",
          "()Z",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_shouldExposePasswordText);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_getAccessibilityServiceEventTypeMask
    = 0;
static jint Java_WebContentsAccessibilityImpl_getAccessibilityServiceEventTypeMask(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "getAccessibilityServiceEventTypeMask",
          "()I",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_getAccessibilityServiceEventTypeMask);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_getAccessibilityServiceFeedbackTypeMask
    = 0;
static jint Java_WebContentsAccessibilityImpl_getAccessibilityServiceFeedbackTypeMask(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "getAccessibilityServiceFeedbackTypeMask",
          "()I",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_getAccessibilityServiceFeedbackTypeMask);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_getAccessibilityServiceFlagsMask
    = 0;
static jint Java_WebContentsAccessibilityImpl_getAccessibilityServiceFlagsMask(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "getAccessibilityServiceFlagsMask",
          "()I",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_getAccessibilityServiceFlagsMask);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_getAccessibilityServiceCapabilitiesMask
    = 0;
static jint Java_WebContentsAccessibilityImpl_getAccessibilityServiceCapabilitiesMask(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env),
          "getAccessibilityServiceCapabilitiesMask",
          "()I",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_getAccessibilityServiceCapabilitiesMask);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace content

#endif  // org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_JNI
