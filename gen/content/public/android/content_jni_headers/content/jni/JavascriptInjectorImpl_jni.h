// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/JavascriptInjectorImpl

#ifndef org_chromium_content_browser_JavascriptInjectorImpl_JNI
#define org_chromium_content_browser_JavascriptInjectorImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_JavascriptInjectorImpl[];
const char kClassPath_org_chromium_content_browser_JavascriptInjectorImpl[] =
    "org/chromium/content/browser/JavascriptInjectorImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_JavascriptInjectorImpl_clazz = 0;
#ifndef org_chromium_content_browser_JavascriptInjectorImpl_clazz_defined
#define org_chromium_content_browser_JavascriptInjectorImpl_clazz_defined
inline jclass org_chromium_content_browser_JavascriptInjectorImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_JavascriptInjectorImpl,
      &g_org_chromium_content_browser_JavascriptInjectorImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_JavascriptInjectorImpl_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents,
    const base::android::JavaParamRef<jobject>& retainedObjects);

JNI_GENERATOR_EXPORT jlong Java_org_chromium_content_browser_JavascriptInjectorImpl_nativeInit(
    JNIEnv* env,
    jobject jcaller,
    jobject webContents,
    jobject retainedObjects) {
  return JNI_JavascriptInjectorImpl_Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jobject>(env, retainedObjects));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_JavascriptInjectorImpl_nativeSetAllowInspection(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeJavascriptInjector,
    jboolean allow) {
  JavascriptInjector* native = reinterpret_cast<JavascriptInjector*>(nativeJavascriptInjector);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAllowInspection");
  return native->SetAllowInspection(env, base::android::JavaParamRef<jobject>(env, jcaller), allow);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_JavascriptInjectorImpl_nativeAddInterface(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeJavascriptInjector,
    jobject object,
    jstring name,
    jclass requiredAnnotation) {
  JavascriptInjector* native = reinterpret_cast<JavascriptInjector*>(nativeJavascriptInjector);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddInterface");
  return native->AddInterface(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, object), base::android::JavaParamRef<jstring>(env,
      name), base::android::JavaParamRef<jclass>(env, requiredAnnotation));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_JavascriptInjectorImpl_nativeRemoveInterface(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeJavascriptInjector,
    jstring name) {
  JavascriptInjector* native = reinterpret_cast<JavascriptInjector*>(nativeJavascriptInjector);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveInterface");
  return native->RemoveInterface(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, name));
}


static base::subtle::AtomicWord g_org_chromium_content_browser_JavascriptInjectorImpl_onDestroy = 0;
static void Java_JavascriptInjectorImpl_onDestroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_JavascriptInjectorImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_JavascriptInjectorImpl_clazz(env),
          "onDestroy",
          "()V",
          &g_org_chromium_content_browser_JavascriptInjectorImpl_onDestroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace content

#endif  // org_chromium_content_browser_JavascriptInjectorImpl_JNI
