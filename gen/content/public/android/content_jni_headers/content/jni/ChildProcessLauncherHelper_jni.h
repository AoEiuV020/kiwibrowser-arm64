// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ChildProcessLauncherHelper

#ifndef org_chromium_content_browser_ChildProcessLauncherHelper_JNI
#define org_chromium_content_browser_ChildProcessLauncherHelper_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_ChildProcessLauncherHelper[];
const char kClassPath_org_chromium_content_browser_ChildProcessLauncherHelper[] =
    "org/chromium/content/browser/ChildProcessLauncherHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_ChildProcessLauncherHelper_clazz = 0;
#ifndef org_chromium_content_browser_ChildProcessLauncherHelper_clazz_defined
#define org_chromium_content_browser_ChildProcessLauncherHelper_clazz_defined
inline jclass org_chromium_content_browser_ChildProcessLauncherHelper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_ChildProcessLauncherHelper,
      &g_org_chromium_content_browser_ChildProcessLauncherHelper_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {
namespace internal {

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ChildProcessLauncherHelper_nativeOnChildProcessStarted(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeChildProcessLauncherHelper,
    jint pid) {
  ChildProcessLauncherHelper* native =
      reinterpret_cast<ChildProcessLauncherHelper*>(nativeChildProcessLauncherHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnChildProcessStarted");
  return native->OnChildProcessStarted(env, base::android::JavaParamRef<jobject>(env, jcaller),
      pid);
}


static base::subtle::AtomicWord g_org_chromium_content_browser_ChildProcessLauncherHelper_makeFdInfo
    = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_ChildProcessLauncherHelper_makeFdInfo(JNIEnv*
    env, JniIntWrapper id,
    JniIntWrapper fd,
    jboolean autoClose,
    jlong offset,
    jlong size) {
  CHECK_CLAZZ(env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
      org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          "makeFdInfo",
          "(IIZJJ)Lorg/chromium/base/process_launcher/FileDescriptorInfo;",
          &g_org_chromium_content_browser_ChildProcessLauncherHelper_makeFdInfo);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          method_id, as_jint(id), as_jint(fd), autoClose, offset, size);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_ChildProcessLauncherHelper_createAndStart = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ChildProcessLauncherHelper_createAndStart(JNIEnv* env, jlong nativePointer,
    const base::android::JavaRef<jobjectArray>& commandLine,
    const base::android::JavaRef<jobjectArray>& filesToBeMapped) {
  CHECK_CLAZZ(env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
      org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          "createAndStart",
"(J[Ljava/lang/String;[Lorg/chromium/base/process_launcher/FileDescriptorInfo;)Lorg/chromium/content/browser/ChildProcessLauncherHelper;",
          &g_org_chromium_content_browser_ChildProcessLauncherHelper_createAndStart);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          method_id, nativePointer, commandLine.obj(), filesToBeMapped.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_ChildProcessLauncherHelper_hasOomProtectionBindings = 0;
static jboolean Java_ChildProcessLauncherHelper_hasOomProtectionBindings(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          "hasOomProtectionBindings",
          "()Z",
          &g_org_chromium_content_browser_ChildProcessLauncherHelper_hasOomProtectionBindings);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_ChildProcessLauncherHelper_isApplicationInForeground = 0;
static jboolean Java_ChildProcessLauncherHelper_isApplicationInForeground(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          "isApplicationInForeground",
          "()Z",
          &g_org_chromium_content_browser_ChildProcessLauncherHelper_isApplicationInForeground);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_ChildProcessLauncherHelper_isKilledByUs = 0;
static jboolean Java_ChildProcessLauncherHelper_isKilledByUs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          "isKilledByUs",
          "()Z",
          &g_org_chromium_content_browser_ChildProcessLauncherHelper_isKilledByUs);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_ChildProcessLauncherHelper_setPriority = 0;
static void Java_ChildProcessLauncherHelper_setPriority(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper pid,
    jboolean foreground,
    jlong frameDepth,
    jboolean boostForPendingViews,
    JniIntWrapper importance) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          "setPriority",
          "(IZJZI)V",
          &g_org_chromium_content_browser_ChildProcessLauncherHelper_setPriority);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(pid), foreground, frameDepth, boostForPendingViews,
              as_jint(importance));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_content_browser_ChildProcessLauncherHelper_stop = 0;
static void Java_ChildProcessLauncherHelper_stop(JNIEnv* env, JniIntWrapper pid) {
  CHECK_CLAZZ(env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
      org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          "stop",
          "(I)V",
          &g_org_chromium_content_browser_ChildProcessLauncherHelper_stop);

     env->CallStaticVoidMethod(org_chromium_content_browser_ChildProcessLauncherHelper_clazz(env),
          method_id, as_jint(pid));
  jni_generator::CheckException(env);
}

}  // namespace internal
}  // namespace content

#endif  // org_chromium_content_browser_ChildProcessLauncherHelper_JNI
