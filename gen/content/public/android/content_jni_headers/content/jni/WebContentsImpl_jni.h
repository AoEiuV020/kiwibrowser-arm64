// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/webcontents/WebContentsImpl

#ifndef org_chromium_content_browser_webcontents_WebContentsImpl_JNI
#define org_chromium_content_browser_webcontents_WebContentsImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_webcontents_WebContentsImpl[];
const char kClassPath_org_chromium_content_browser_webcontents_WebContentsImpl[] =
    "org/chromium/content/browser/webcontents/WebContentsImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_clazz = 0;
#ifndef org_chromium_content_browser_webcontents_WebContentsImpl_clazz_defined
#define org_chromium_content_browser_webcontents_WebContentsImpl_clazz_defined
inline jclass org_chromium_content_browser_webcontents_WebContentsImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_webcontents_WebContentsImpl,
      &g_org_chromium_content_browser_webcontents_WebContentsImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static void JNI_WebContentsImpl_DestroyWebContents(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong webContentsAndroidPtr);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDestroyWebContents(
    JNIEnv* env,
    jclass jcaller,
    jlong webContentsAndroidPtr) {
  return JNI_WebContentsImpl_DestroyWebContents(env, base::android::JavaParamRef<jclass>(env,
      jcaller), webContentsAndroidPtr);
}

static base::android::ScopedJavaLocalRef<jobject> JNI_WebContentsImpl_FromNativePtr(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    jlong webContentsAndroidPtr);

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeFromNativePtr(
    JNIEnv* env,
    jclass jcaller,
    jlong webContentsAndroidPtr) {
  return JNI_WebContentsImpl_FromNativePtr(env, base::android::JavaParamRef<jclass>(env, jcaller),
      webContentsAndroidPtr).Release();
}

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetTopLevelNativeWindow(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTopLevelNativeWindow", NULL);
  return native->GetTopLevelNativeWindow(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetTopLevelNativeWindow(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobject windowAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTopLevelNativeWindow");
  return native->SetTopLevelNativeWindow(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, windowAndroid));
}

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetMainFrame(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetMainFrame", NULL);
  return native->GetMainFrame(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetTitle(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTitle", NULL);
  return native->GetTitle(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetVisibleURL(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetVisibleURL", NULL);
  return native->GetVisibleURL(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetEncoding(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEncoding", NULL);
  return native->GetEncoding(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsLoading(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsLoading", false);
  return native->IsLoading(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsLoadingToDifferentDocument(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsLoadingToDifferentDocument", false);
  return native->IsLoadingToDifferentDocument(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeStop(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Stop");
  return native->Stop(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCut(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Cut");
  return native->Cut(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCopy(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Copy");
  return native->Copy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativePaste(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Paste");
  return native->Paste(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativePasteAsPlainText(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PasteAsPlainText");
  return native->PasteAsPlainText(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeReplace(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring word) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Replace");
  return native->Replace(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, word));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSelectAll(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectAll");
  return native->SelectAll(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCollapseSelection(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CollapseSelection");
  return native->CollapseSelection(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeOnHide(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnHide");
  return native->OnHide(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeOnShow(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnShow");
  return native->OnShow(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetImportance(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint importance) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetImportance");
  return native->SetImportance(env, base::android::JavaParamRef<jobject>(env, jcaller), importance);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSuspendAllMediaPlayers(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SuspendAllMediaPlayers");
  return native->SuspendAllMediaPlayers(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetAudioMuted(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jboolean mute) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAudioMuted");
  return native->SetAudioMuted(env, base::android::JavaParamRef<jobject>(env, jcaller), mute);
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetBackgroundColor(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBackgroundColor", 0);
  return native->GetBackgroundColor(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsShowingInterstitialPage(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsShowingInterstitialPage", false);
  return native->IsShowingInterstitialPage(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeFocusLocationBarByDefault(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FocusLocationBarByDefault", false);
  return native->FocusLocationBarByDefault(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsRenderWidgetHostViewReady(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsRenderWidgetHostViewReady", false);
  return native->IsRenderWidgetHostViewReady(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeExitFullscreen(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ExitFullscreen");
  return native->ExitFullscreen(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeScrollFocusedEditableNodeIntoView(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollFocusedEditableNodeIntoView");
  return native->ScrollFocusedEditableNodeIntoView(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSelectWordAroundCaret(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectWordAroundCaret");
  return native->SelectWordAroundCaret(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeAdjustSelectionByCharacterOffset(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint startAdjust,
    jint endAdjust,
    jboolean showSelectionMenu) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AdjustSelectionByCharacterOffset");
  return native->AdjustSelectionByCharacterOffset(env, base::android::JavaParamRef<jobject>(env,
      jcaller), startAdjust, endAdjust, showSelectionMenu);
}

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetLastCommittedURL(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLastCommittedURL", NULL);
  return native->GetLastCommittedURL(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsIncognito(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsIncognito", false);
  return native->IsIncognito(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeResumeLoadingCreatedWebContents(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResumeLoadingCreatedWebContents");
  return native->ResumeLoadingCreatedWebContents(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeEvaluateJavaScript(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring script,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScript");
  return native->EvaluateJavaScript(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, script), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeEvaluateJavaScriptForTests(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring script,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScriptForTests");
  return native->EvaluateJavaScriptForTests(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, script), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeAddMessageToDevToolsConsole(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint level,
    jstring message) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddMessageToDevToolsConsole");
  return native->AddMessageToDevToolsConsole(env, base::android::JavaParamRef<jobject>(env,
      jcaller), level, base::android::JavaParamRef<jstring>(env, message));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativePostMessageToFrame(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring frameName,
    jstring message,
    jstring sourceOrigin,
    jstring targetOrigin,
    jobjectArray ports) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PostMessageToFrame");
  return native->PostMessageToFrame(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, frameName),
      base::android::JavaParamRef<jstring>(env, message), base::android::JavaParamRef<jstring>(env,
      sourceOrigin), base::android::JavaParamRef<jstring>(env, targetOrigin),
      base::android::JavaParamRef<jobjectArray>(env, ports));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeHasAccessedInitialDocument(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasAccessedInitialDocument", false);
  return native->HasAccessedInitialDocument(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetThemeColor(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetThemeColor", 0);
  return native->GetThemeColor(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeRequestSmartClipExtract(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobject callback,
    jint x,
    jint y,
    jint width,
    jint height) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestSmartClipExtract");
  return native->RequestSmartClipExtract(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, callback), x, y, width, height);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeRequestAccessibilitySnapshot(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestAccessibilitySnapshot");
  return native->RequestAccessibilitySnapshot(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetOverscrollRefreshHandler(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobject nativeOverscrollRefreshHandler) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetOverscrollRefreshHandler");
  return native->SetOverscrollRefreshHandler(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, nativeOverscrollRefreshHandler));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetContentBitmap(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint width,
    jint height,
    jstring path,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetContentBitmap");
  return native->GetContentBitmap(env, base::android::JavaParamRef<jobject>(env, jcaller), width,
      height, base::android::JavaParamRef<jstring>(env, path),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetContentBitmapFull(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint width,
    jint height,
    jstring path,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetContentBitmapFull");
  return native->GetContentBitmapFull(env, base::android::JavaParamRef<jobject>(env, jcaller),
      width, height, base::android::JavaParamRef<jstring>(env, path),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeReloadLoFiImages(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ReloadLoFiImages");
  return native->ReloadLoFiImages(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDownloadImage(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring url,
    jboolean isFavicon,
    jint maxBitmapSize,
    jboolean bypassCache,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DownloadImage", 0);
  return native->DownloadImage(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url), isFavicon, maxBitmapSize, bypassCache,
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDismissTextHandles(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DismissTextHandles");
  return native->DismissTextHandles(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeShowContextMenuAtTouchHandle(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint x,
    jint y) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowContextMenuAtTouchHandle");
  return native->ShowContextMenuAtTouchHandle(env, base::android::JavaParamRef<jobject>(env,
      jcaller), x, y);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetHasPersistentVideo(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jboolean value) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetHasPersistentVideo");
  return native->SetHasPersistentVideo(env, base::android::JavaParamRef<jobject>(env, jcaller),
      value);
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeHasActiveEffectivelyFullscreenVideo(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasActiveEffectivelyFullscreenVideo", false);
  return native->HasActiveEffectivelyFullscreenVideo(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsPictureInPictureAllowedForFullscreenVideo(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsPictureInPictureAllowedForFullscreenVideo", false);
  return native->IsPictureInPictureAllowedForFullscreenVideo(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetFullscreenVideoSize(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFullscreenVideoSize", NULL);
  return native->GetFullscreenVideoSize(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetSize(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint width,
    jint height) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSize");
  return native->SetSize(env, base::android::JavaParamRef<jobject>(env, jcaller), width, height);
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetWidth(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetWidth", 0);
  return native->GetWidth(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetHeight(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetHeight", 0);
  return native->GetHeight(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetOrCreateEventForwarder(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOrCreateEventForwarder", NULL);
  return native->GetOrCreateEventForwarder(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetTopControlsShrinkBlinkHeightPixForTesting(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTopControlsShrinkBlinkHeightPixForTesting", 0);
  return native->GetTopControlsShrinkBlinkHeightPixForTesting(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetViewAndroidDelegate(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobject viewDelegate) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetViewAndroidDelegate");
  return native->SetViewAndroidDelegate(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, viewDelegate));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSendOrientationChangeEvent(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint orientation) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendOrientationChangeEvent");
  return native->SendOrientationChangeEvent(env, base::android::JavaParamRef<jobject>(env, jcaller),
      orientation);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeOnScaleFactorChanged(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnScaleFactorChanged");
  return native->OnScaleFactorChanged(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetFocus(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jboolean focused) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFocus");
  return native->SetFocus(env, base::android::JavaParamRef<jobject>(env, jcaller), focused);
}


static base::subtle::AtomicWord g_org_chromium_content_browser_webcontents_WebContentsImpl_create =
    0;
static base::android::ScopedJavaLocalRef<jobject> Java_WebContentsImpl_create(JNIEnv* env, jlong
    nativeWebContentsAndroid,
    const base::android::JavaRef<jobject>& navigationController) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "create",
"(JLorg/chromium/content_public/browser/NavigationController;)Lorg/chromium/content/browser/webcontents/WebContentsImpl;",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_create);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, nativeWebContentsAndroid, navigationController.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_clearNativePtr = 0;
static void Java_WebContentsImpl_clearNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "clearNativePtr",
          "()V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_getNativePointer = 0;
static jlong Java_WebContentsImpl_getNativePointer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "getNativePointer",
          "()J",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_getNativePointer);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_onEvaluateJavaScriptResult = 0;
static void Java_WebContentsImpl_onEvaluateJavaScriptResult(JNIEnv* env, const
    base::android::JavaRef<jstring>& jsonResult,
    const base::android::JavaRef<jobject>& callback) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "onEvaluateJavaScriptResult",
          "(Ljava/lang/String;Lorg/chromium/content_public/browser/JavaScriptCallback;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_onEvaluateJavaScriptResult);

     env->CallStaticVoidMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, jsonResult.obj(), callback.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_onSmartClipDataExtracted = 0;
static void Java_WebContentsImpl_onSmartClipDataExtracted(JNIEnv* env, const
    base::android::JavaRef<jstring>& text,
    const base::android::JavaRef<jstring>& html,
    JniIntWrapper left,
    JniIntWrapper top,
    JniIntWrapper right,
    JniIntWrapper bottom,
    const base::android::JavaRef<jobject>& callback) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "onSmartClipDataExtracted",
"(Ljava/lang/String;Ljava/lang/String;IIIILorg/chromium/content/browser/webcontents/WebContentsImpl$SmartClipCallback;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_onSmartClipDataExtracted);

     env->CallStaticVoidMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, text.obj(), html.obj(), as_jint(left), as_jint(top), as_jint(right),
              as_jint(bottom), callback.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_onAccessibilitySnapshot = 0;
static void Java_WebContentsImpl_onAccessibilitySnapshot(JNIEnv* env, const
    base::android::JavaRef<jobject>& root,
    const base::android::JavaRef<jobject>& callback) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "onAccessibilitySnapshot",
"(Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;Lorg/chromium/content_public/browser/AccessibilitySnapshotCallback;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_onAccessibilitySnapshot);

     env->CallStaticVoidMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, root.obj(), callback.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_addAccessibilityNodeAsChild = 0;
static void Java_WebContentsImpl_addAccessibilityNodeAsChild(JNIEnv* env, const
    base::android::JavaRef<jobject>& parent,
    const base::android::JavaRef<jobject>& child) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "addAccessibilityNodeAsChild",
"(Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_addAccessibilityNodeAsChild);

     env->CallStaticVoidMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, parent.obj(), child.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createAccessibilitySnapshotNode = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_WebContentsImpl_createAccessibilitySnapshotNode(JNIEnv* env, JniIntWrapper
    parentRelativeLeft,
    JniIntWrapper parentRelativeTop,
    JniIntWrapper width,
    JniIntWrapper height,
    jboolean isRootNode,
    const base::android::JavaRef<jstring>& text,
    JniIntWrapper color,
    JniIntWrapper bgcolor,
    jfloat size,
    jboolean bold,
    jboolean italic,
    jboolean underline,
    jboolean lineThrough,
    const base::android::JavaRef<jstring>& className) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "createAccessibilitySnapshotNode",
"(IIIIZLjava/lang/String;IIFZZZZLjava/lang/String;)Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;",
&g_org_chromium_content_browser_webcontents_WebContentsImpl_createAccessibilitySnapshotNode);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, as_jint(parentRelativeLeft), as_jint(parentRelativeTop), as_jint(width),
              as_jint(height), isRootNode, text.obj(), as_jint(color), as_jint(bgcolor), size, bold,
              italic, underline, lineThrough, className.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_setAccessibilitySnapshotSelection =
    0;
static void Java_WebContentsImpl_setAccessibilitySnapshotSelection(JNIEnv* env, const
    base::android::JavaRef<jobject>& node,
    JniIntWrapper start,
    JniIntWrapper end) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "setAccessibilitySnapshotSelection",
          "(Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;II)V",
&g_org_chromium_content_browser_webcontents_WebContentsImpl_setAccessibilitySnapshotSelection);

     env->CallStaticVoidMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, node.obj(), as_jint(start), as_jint(end));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_onDownloadImageFinished = 0;
static void Java_WebContentsImpl_onDownloadImageFinished(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& callback,
    JniIntWrapper id,
    JniIntWrapper httpStatusCode,
    const base::android::JavaRef<jstring>& imageUrl,
    const base::android::JavaRef<jobject>& bitmaps,
    const base::android::JavaRef<jobject>& sizes) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "onDownloadImageFinished",
"(Lorg/chromium/content_public/browser/ImageDownloadCallback;IILjava/lang/String;Ljava/util/List;Ljava/util/List;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_onDownloadImageFinished);

     env->CallVoidMethod(obj.obj(),
          method_id, callback.obj(), as_jint(id), as_jint(httpStatusCode), imageUrl.obj(),
              bitmaps.obj(), sizes.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_setMediaSession = 0;
static void Java_WebContentsImpl_setMediaSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& mediaSession) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "setMediaSession",
          "(Lorg/chromium/content/browser/MediaSessionImpl;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_setMediaSession);

     env->CallVoidMethod(obj.obj(),
          method_id, mediaSession.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createBitmapList = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_WebContentsImpl_createBitmapList(JNIEnv* env)
    {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "createBitmapList",
          "()Ljava/util/List;",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_createBitmapList);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_addToBitmapList = 0;
static void Java_WebContentsImpl_addToBitmapList(JNIEnv* env, const base::android::JavaRef<jobject>&
    bitmaps,
    const base::android::JavaRef<jobject>& bitmap) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "addToBitmapList",
          "(Ljava/util/List;Landroid/graphics/Bitmap;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_addToBitmapList);

     env->CallStaticVoidMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, bitmaps.obj(), bitmap.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createSizeList = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_WebContentsImpl_createSizeList(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "createSizeList",
          "()Ljava/util/List;",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_createSizeList);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createSizeAndAddToList = 0;
static void Java_WebContentsImpl_createSizeAndAddToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& sizes,
    JniIntWrapper width,
    JniIntWrapper height) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "createSizeAndAddToList",
          "(Ljava/util/List;II)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_createSizeAndAddToList);

     env->CallStaticVoidMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, sizes.obj(), as_jint(width), as_jint(height));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createSize = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_WebContentsImpl_createSize(JNIEnv* env,
    JniIntWrapper width,
    JniIntWrapper height) {
  CHECK_CLAZZ(env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          "createSize",
          "(II)Landroid/graphics/Rect;",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_createSize);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env),
          method_id, as_jint(width), as_jint(height));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace content

#endif  // org_chromium_content_browser_webcontents_WebContentsImpl_JNI
