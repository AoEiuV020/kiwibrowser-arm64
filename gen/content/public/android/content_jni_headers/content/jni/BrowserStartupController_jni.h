// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/BrowserStartupController

#ifndef org_chromium_content_browser_BrowserStartupController_JNI
#define org_chromium_content_browser_BrowserStartupController_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_BrowserStartupController[];
const char kClassPath_org_chromium_content_browser_BrowserStartupController[] =
    "org/chromium/content/browser/BrowserStartupController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_BrowserStartupController_clazz = 0;
#ifndef org_chromium_content_browser_BrowserStartupController_clazz_defined
#define org_chromium_content_browser_BrowserStartupController_clazz_defined
inline jclass org_chromium_content_browser_BrowserStartupController_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_BrowserStartupController,
      &g_org_chromium_content_browser_BrowserStartupController_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static void JNI_BrowserStartupController_SetCommandLineFlags(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean singleProcess,
    const base::android::JavaParamRef<jstring>& pluginDescriptor);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_BrowserStartupController_nativeSetCommandLineFlags(
    JNIEnv* env,
    jclass jcaller,
    jboolean singleProcess,
    jstring pluginDescriptor) {
  return JNI_BrowserStartupController_SetCommandLineFlags(env,
      base::android::JavaParamRef<jclass>(env, jcaller), singleProcess,
      base::android::JavaParamRef<jstring>(env, pluginDescriptor));
}

static jboolean JNI_BrowserStartupController_IsOfficialBuild(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_BrowserStartupController_nativeIsOfficialBuild(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_BrowserStartupController_IsOfficialBuild(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static jboolean JNI_BrowserStartupController_IsPluginEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_content_browser_BrowserStartupController_nativeIsPluginEnabled(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_BrowserStartupController_IsPluginEnabled(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static void JNI_BrowserStartupController_FlushStartupTasks(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_BrowserStartupController_nativeFlushStartupTasks(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_BrowserStartupController_FlushStartupTasks(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}


static base::subtle::AtomicWord
    g_org_chromium_content_browser_BrowserStartupController_browserStartupComplete = 0;
static void Java_BrowserStartupController_browserStartupComplete(JNIEnv* env, JniIntWrapper result)
    {
  CHECK_CLAZZ(env, org_chromium_content_browser_BrowserStartupController_clazz(env),
      org_chromium_content_browser_BrowserStartupController_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_BrowserStartupController_clazz(env),
          "browserStartupComplete",
          "(I)V",
          &g_org_chromium_content_browser_BrowserStartupController_browserStartupComplete);

     env->CallStaticVoidMethod(org_chromium_content_browser_BrowserStartupController_clazz(env),
          method_id, as_jint(result));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_chromium_content_browser_BrowserStartupController_shouldStartGpuProcessOnBrowserStartup =
    0;
static jboolean Java_BrowserStartupController_shouldStartGpuProcessOnBrowserStartup(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_content_browser_BrowserStartupController_clazz(env),
      org_chromium_content_browser_BrowserStartupController_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_content_browser_BrowserStartupController_clazz(env),
          "shouldStartGpuProcessOnBrowserStartup",
          "()Z",
&g_org_chromium_content_browser_BrowserStartupController_shouldStartGpuProcessOnBrowserStartup);

  jboolean ret =
      env->CallStaticBooleanMethod(org_chromium_content_browser_BrowserStartupController_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace content

#endif  // org_chromium_content_browser_BrowserStartupController_JNI
