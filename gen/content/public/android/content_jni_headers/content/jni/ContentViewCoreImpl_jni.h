// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentViewCoreImpl

#ifndef org_chromium_content_browser_ContentViewCoreImpl_JNI
#define org_chromium_content_browser_ContentViewCoreImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_ContentViewCoreImpl[];
const char kClassPath_org_chromium_content_browser_ContentViewCoreImpl[] =
    "org/chromium/content/browser/ContentViewCoreImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_content_browser_ContentViewCoreImpl_clazz = 0;
#ifndef org_chromium_content_browser_ContentViewCoreImpl_clazz_defined
#define org_chromium_content_browser_ContentViewCoreImpl_clazz_defined
inline jclass org_chromium_content_browser_ContentViewCoreImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_ContentViewCoreImpl,
      &g_org_chromium_content_browser_ContentViewCoreImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_ContentViewCoreImpl_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong Java_org_chromium_content_browser_ContentViewCoreImpl_nativeInit(
    JNIEnv* env,
    jobject jcaller,
    jobject webContents) {
  return JNI_ContentViewCoreImpl_Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_content_browser_ContentViewCoreImpl_nativeOnJavaContentViewCoreDestroyed(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeContentViewCore) {
  ContentViewCore* native = reinterpret_cast<ContentViewCore*>(nativeContentViewCore);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnJavaContentViewCoreDestroyed");
  return native->OnJavaContentViewCoreDestroyed(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}


static base::subtle::AtomicWord
    g_org_chromium_content_browser_ContentViewCoreImpl_onNativeContentViewCoreDestroyed = 0;
static void Java_ContentViewCoreImpl_onNativeContentViewCoreDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeContentViewCore) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContentViewCoreImpl_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_content_browser_ContentViewCoreImpl_clazz(env),
          "onNativeContentViewCoreDestroyed",
          "(J)V",
          &g_org_chromium_content_browser_ContentViewCoreImpl_onNativeContentViewCoreDestroyed);

     env->CallVoidMethod(obj.obj(),
          method_id, nativeContentViewCore);
  jni_generator::CheckException(env);
}

}  // namespace content

#endif  // org_chromium_content_browser_ContentViewCoreImpl_JNI
