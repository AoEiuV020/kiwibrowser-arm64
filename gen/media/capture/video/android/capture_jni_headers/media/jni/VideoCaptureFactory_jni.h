// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/VideoCaptureFactory

#ifndef org_chromium_media_VideoCaptureFactory_JNI
#define org_chromium_media_VideoCaptureFactory_JNI

#include <jni.h>

#include "../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_VideoCaptureFactory[];
const char kClassPath_org_chromium_media_VideoCaptureFactory[] =
    "org/chromium/media/VideoCaptureFactory";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_clazz = 0;
#ifndef org_chromium_media_VideoCaptureFactory_clazz_defined
#define org_chromium_media_VideoCaptureFactory_clazz_defined
inline jclass org_chromium_media_VideoCaptureFactory_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_VideoCaptureFactory,
      &g_org_chromium_media_VideoCaptureFactory_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {


static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_isLegacyOrDeprecatedDevice
    = 0;
static jboolean Java_VideoCaptureFactory_isLegacyOrDeprecatedDevice(JNIEnv* env, JniIntWrapper id) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "isLegacyOrDeprecatedDevice",
          "(I)Z",
          &g_org_chromium_media_VideoCaptureFactory_isLegacyOrDeprecatedDevice);

  jboolean ret =
      env->CallStaticBooleanMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_createVideoCapture = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_VideoCaptureFactory_createVideoCapture(JNIEnv* env, JniIntWrapper id,
    jlong nativeVideoCaptureDeviceAndroid) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "createVideoCapture",
          "(IJ)Lorg/chromium/media/VideoCapture;",
          &g_org_chromium_media_VideoCaptureFactory_createVideoCapture);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, as_jint(id), nativeVideoCaptureDeviceAndroid);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getNumberOfCameras = 0;
static jint Java_VideoCaptureFactory_getNumberOfCameras(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getNumberOfCameras",
          "()I",
          &g_org_chromium_media_VideoCaptureFactory_getNumberOfCameras);

  jint ret =
      env->CallStaticIntMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getCaptureApiType = 0;
static jint Java_VideoCaptureFactory_getCaptureApiType(JNIEnv* env, JniIntWrapper id) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getCaptureApiType",
          "(I)I",
          &g_org_chromium_media_VideoCaptureFactory_getCaptureApiType);

  jint ret =
      env->CallStaticIntMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getFacingMode = 0;
static jint Java_VideoCaptureFactory_getFacingMode(JNIEnv* env, JniIntWrapper id) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getFacingMode",
          "(I)I",
          &g_org_chromium_media_VideoCaptureFactory_getFacingMode);

  jint ret =
      env->CallStaticIntMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, as_jint(id));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getDeviceName = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_VideoCaptureFactory_getDeviceName(JNIEnv*
    env, JniIntWrapper id) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getDeviceName",
          "(I)Ljava/lang/String;",
          &g_org_chromium_media_VideoCaptureFactory_getDeviceName);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, as_jint(id)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getDeviceSupportedFormats =
    0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_VideoCaptureFactory_getDeviceSupportedFormats(JNIEnv* env, JniIntWrapper id) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getDeviceSupportedFormats",
          "(I)[Lorg/chromium/media/VideoCaptureFormat;",
          &g_org_chromium_media_VideoCaptureFactory_getDeviceSupportedFormats);

  jobjectArray ret =
static_cast<jobjectArray>(env->CallStaticObjectMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, as_jint(id)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getCaptureFormatWidth = 0;
static jint Java_VideoCaptureFactory_getCaptureFormatWidth(JNIEnv* env, const
    base::android::JavaRef<jobject>& format) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getCaptureFormatWidth",
          "(Lorg/chromium/media/VideoCaptureFormat;)I",
          &g_org_chromium_media_VideoCaptureFactory_getCaptureFormatWidth);

  jint ret =
      env->CallStaticIntMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, format.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getCaptureFormatHeight = 0;
static jint Java_VideoCaptureFactory_getCaptureFormatHeight(JNIEnv* env, const
    base::android::JavaRef<jobject>& format) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getCaptureFormatHeight",
          "(Lorg/chromium/media/VideoCaptureFormat;)I",
          &g_org_chromium_media_VideoCaptureFactory_getCaptureFormatHeight);

  jint ret =
      env->CallStaticIntMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, format.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getCaptureFormatFramerate =
    0;
static jint Java_VideoCaptureFactory_getCaptureFormatFramerate(JNIEnv* env, const
    base::android::JavaRef<jobject>& format) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getCaptureFormatFramerate",
          "(Lorg/chromium/media/VideoCaptureFormat;)I",
          &g_org_chromium_media_VideoCaptureFactory_getCaptureFormatFramerate);

  jint ret =
      env->CallStaticIntMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, format.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_VideoCaptureFactory_getCaptureFormatPixelFormat
    = 0;
static jint Java_VideoCaptureFactory_getCaptureFormatPixelFormat(JNIEnv* env, const
    base::android::JavaRef<jobject>& format) {
  CHECK_CLAZZ(env, org_chromium_media_VideoCaptureFactory_clazz(env),
      org_chromium_media_VideoCaptureFactory_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_VideoCaptureFactory_clazz(env),
          "getCaptureFormatPixelFormat",
          "(Lorg/chromium/media/VideoCaptureFormat;)I",
          &g_org_chromium_media_VideoCaptureFactory_getCaptureFormatPixelFormat);

  jint ret =
      env->CallStaticIntMethod(org_chromium_media_VideoCaptureFactory_clazz(env),
          method_id, format.obj());
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace media

#endif  // org_chromium_media_VideoCaptureFactory_JNI
