// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/midi/UsbMidiDeviceFactoryAndroid

#ifndef org_chromium_midi_UsbMidiDeviceFactoryAndroid_JNI
#define org_chromium_midi_UsbMidiDeviceFactoryAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_midi_UsbMidiDeviceFactoryAndroid[];
const char kClassPath_org_chromium_midi_UsbMidiDeviceFactoryAndroid[] =
    "org/chromium/midi/UsbMidiDeviceFactoryAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz = 0;
#ifndef org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz_defined
#define org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz_defined
inline jclass org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_midi_UsbMidiDeviceFactoryAndroid,
      &g_org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace midi {

JNI_GENERATOR_EXPORT void
    Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceRequestDone(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeUsbMidiDeviceFactoryAndroid,
    jobjectArray devices) {
  UsbMidiDeviceFactoryAndroid* native =
      reinterpret_cast<UsbMidiDeviceFactoryAndroid*>(nativeUsbMidiDeviceFactoryAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUsbMidiDeviceRequestDone");
  return native->OnUsbMidiDeviceRequestDone(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobjectArray>(env, devices));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceAttached(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeUsbMidiDeviceFactoryAndroid,
    jobject device) {
  UsbMidiDeviceFactoryAndroid* native =
      reinterpret_cast<UsbMidiDeviceFactoryAndroid*>(nativeUsbMidiDeviceFactoryAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUsbMidiDeviceAttached");
  return native->OnUsbMidiDeviceAttached(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, device));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceDetached(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeUsbMidiDeviceFactoryAndroid,
    jint index) {
  UsbMidiDeviceFactoryAndroid* native =
      reinterpret_cast<UsbMidiDeviceFactoryAndroid*>(nativeUsbMidiDeviceFactoryAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUsbMidiDeviceDetached");
  return native->OnUsbMidiDeviceDetached(env, base::android::JavaParamRef<jobject>(env, jcaller),
      index);
}


static base::subtle::AtomicWord g_org_chromium_midi_UsbMidiDeviceFactoryAndroid_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_UsbMidiDeviceFactoryAndroid_create(JNIEnv*
    env, jlong nativePointer) {
  CHECK_CLAZZ(env, org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(env),
      org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(env),
          "create",
          "(J)Lorg/chromium/midi/UsbMidiDeviceFactoryAndroid;",
          &g_org_chromium_midi_UsbMidiDeviceFactoryAndroid_create);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(env),
          method_id, nativePointer);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_midi_UsbMidiDeviceFactoryAndroid_enumerateDevices =
    0;
static jboolean Java_UsbMidiDeviceFactoryAndroid_enumerateDevices(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(env),
          "enumerateDevices",
          "()Z",
          &g_org_chromium_midi_UsbMidiDeviceFactoryAndroid_enumerateDevices);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_midi_UsbMidiDeviceFactoryAndroid_close = 0;
static void Java_UsbMidiDeviceFactoryAndroid_close(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_midi_UsbMidiDeviceFactoryAndroid_clazz(env),
          "close",
          "()V",
          &g_org_chromium_midi_UsbMidiDeviceFactoryAndroid_close);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace midi

#endif  // org_chromium_midi_UsbMidiDeviceFactoryAndroid_JNI
