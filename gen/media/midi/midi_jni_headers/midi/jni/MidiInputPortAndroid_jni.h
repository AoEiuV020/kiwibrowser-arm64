// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/midi/MidiInputPortAndroid

#ifndef org_chromium_midi_MidiInputPortAndroid_JNI
#define org_chromium_midi_MidiInputPortAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_midi_MidiInputPortAndroid[];
const char kClassPath_org_chromium_midi_MidiInputPortAndroid[] =
    "org/chromium/midi/MidiInputPortAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_midi_MidiInputPortAndroid_clazz = 0;
#ifndef org_chromium_midi_MidiInputPortAndroid_clazz_defined
#define org_chromium_midi_MidiInputPortAndroid_clazz_defined
inline jclass org_chromium_midi_MidiInputPortAndroid_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_midi_MidiInputPortAndroid,
      &g_org_chromium_midi_MidiInputPortAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace midi {

JNI_GENERATOR_EXPORT void Java_org_chromium_midi_MidiInputPortAndroid_nativeOnData(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMidiInputPortAndroid,
    jbyteArray bs,
    jint offset,
    jint count,
    jlong timestamp) {
  MidiInputPortAndroid* native =
      reinterpret_cast<MidiInputPortAndroid*>(nativeMidiInputPortAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnData");
  return native->OnData(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jbyteArray>(env, bs), offset, count, timestamp);
}


static base::subtle::AtomicWord g_org_chromium_midi_MidiInputPortAndroid_open = 0;
static jboolean Java_MidiInputPortAndroid_open(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jlong nativeReceiverPointer) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_MidiInputPortAndroid_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_midi_MidiInputPortAndroid_clazz(env),
          "open",
          "(J)Z",
          &g_org_chromium_midi_MidiInputPortAndroid_open);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, nativeReceiverPointer);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_midi_MidiInputPortAndroid_close = 0;
static void Java_MidiInputPortAndroid_close(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_MidiInputPortAndroid_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_midi_MidiInputPortAndroid_clazz(env),
          "close",
          "()V",
          &g_org_chromium_midi_MidiInputPortAndroid_close);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace midi

#endif  // org_chromium_midi_MidiInputPortAndroid_JNI
