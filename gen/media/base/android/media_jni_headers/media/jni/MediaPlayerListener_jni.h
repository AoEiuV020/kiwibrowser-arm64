// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaPlayerListener

#ifndef org_chromium_media_MediaPlayerListener_JNI
#define org_chromium_media_MediaPlayerListener_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_MediaPlayerListener[];
const char kClassPath_org_chromium_media_MediaPlayerListener[] =
    "org/chromium/media/MediaPlayerListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_media_MediaPlayerListener_clazz = 0;
#ifndef org_chromium_media_MediaPlayerListener_clazz_defined
#define org_chromium_media_MediaPlayerListener_clazz_defined
inline jclass org_chromium_media_MediaPlayerListener_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_MediaPlayerListener,
      &g_org_chromium_media_MediaPlayerListener_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaPlayerListener_nativeOnMediaError(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaPlayerListener,
    jint errorType) {
  MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaError");
  return native->OnMediaError(env, base::android::JavaParamRef<jobject>(env, jcaller), errorType);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaPlayerListener_nativeOnVideoSizeChanged(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaPlayerListener,
    jint width,
    jint height) {
  MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnVideoSizeChanged");
  return native->OnVideoSizeChanged(env, base::android::JavaParamRef<jobject>(env, jcaller), width,
      height);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaPlayerListener_nativeOnBufferingUpdate(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaPlayerListener,
    jint percent) {
  MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnBufferingUpdate");
  return native->OnBufferingUpdate(env, base::android::JavaParamRef<jobject>(env, jcaller),
      percent);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaPlayerListener_nativeOnMediaPrepared(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaPlayerListener) {
  MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaPrepared");
  return native->OnMediaPrepared(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaPlayerListener_nativeOnPlaybackComplete(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaPlayerListener) {
  MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPlaybackComplete");
  return native->OnPlaybackComplete(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaPlayerListener_nativeOnSeekComplete(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaPlayerListener) {
  MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSeekComplete");
  return native->OnSeekComplete(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaPlayerListener_nativeOnMediaInterrupted(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaPlayerListener) {
  MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaInterrupted");
  return native->OnMediaInterrupted(env, base::android::JavaParamRef<jobject>(env, jcaller));
}


static base::subtle::AtomicWord g_org_chromium_media_MediaPlayerListener_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_MediaPlayerListener_create(JNIEnv* env, jlong
    nativeMediaPlayerListener,
    const base::android::JavaRef<jobject>& mediaPlayerBridge) {
  CHECK_CLAZZ(env, org_chromium_media_MediaPlayerListener_clazz(env),
      org_chromium_media_MediaPlayerListener_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_MediaPlayerListener_clazz(env),
          "create",
          "(JLorg/chromium/media/MediaPlayerBridge;)Lorg/chromium/media/MediaPlayerListener;",
          &g_org_chromium_media_MediaPlayerListener_create);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_media_MediaPlayerListener_clazz(env),
          method_id, nativeMediaPlayerListener, mediaPlayerBridge.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace media

#endif  // org_chromium_media_MediaPlayerListener_JNI
