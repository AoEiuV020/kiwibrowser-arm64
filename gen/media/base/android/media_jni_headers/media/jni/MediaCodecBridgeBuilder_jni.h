// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaCodecBridgeBuilder

#ifndef org_chromium_media_MediaCodecBridgeBuilder_JNI
#define org_chromium_media_MediaCodecBridgeBuilder_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_MediaCodecBridgeBuilder[];
const char kClassPath_org_chromium_media_MediaCodecBridgeBuilder[] =
    "org/chromium/media/MediaCodecBridgeBuilder";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_media_MediaCodecBridgeBuilder_clazz
    = 0;
#ifndef org_chromium_media_MediaCodecBridgeBuilder_clazz_defined
#define org_chromium_media_MediaCodecBridgeBuilder_clazz_defined
inline jclass org_chromium_media_MediaCodecBridgeBuilder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_MediaCodecBridgeBuilder,
      &g_org_chromium_media_MediaCodecBridgeBuilder_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {


static base::subtle::AtomicWord g_org_chromium_media_MediaCodecBridgeBuilder_createVideoDecoder = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecBridgeBuilder_createVideoDecoder(JNIEnv* env, const
    base::android::JavaRef<jstring>& mime,
    JniIntWrapper codecType,
    const base::android::JavaRef<jobject>& mediaCrypto,
    JniIntWrapper width,
    JniIntWrapper height,
    const base::android::JavaRef<jobject>& surface,
    const base::android::JavaRef<jbyteArray>& csd0,
    const base::android::JavaRef<jbyteArray>& csd1,
    const base::android::JavaRef<jobject>& hdrMetadata,
    jboolean allowAdaptivePlayback) {
  CHECK_CLAZZ(env, org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
      org_chromium_media_MediaCodecBridgeBuilder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
          "createVideoDecoder",
"(Ljava/lang/String;ILandroid/media/MediaCrypto;IILandroid/view/Surface;[B[BLorg/chromium/media/HdrMetadata;Z)Lorg/chromium/media/MediaCodecBridge;",
          &g_org_chromium_media_MediaCodecBridgeBuilder_createVideoDecoder);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
          method_id, mime.obj(), as_jint(codecType), mediaCrypto.obj(), as_jint(width),
              as_jint(height), surface.obj(), csd0.obj(), csd1.obj(), hdrMetadata.obj(),
              allowAdaptivePlayback);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaCodecBridgeBuilder_createVideoEncoder = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecBridgeBuilder_createVideoEncoder(JNIEnv* env, const
    base::android::JavaRef<jstring>& mime,
    JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper bitRate,
    JniIntWrapper frameRate,
    JniIntWrapper iFrameInterval,
    JniIntWrapper colorFormat) {
  CHECK_CLAZZ(env, org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
      org_chromium_media_MediaCodecBridgeBuilder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
          "createVideoEncoder",
          "(Ljava/lang/String;IIIIII)Lorg/chromium/media/MediaCodecBridge;",
          &g_org_chromium_media_MediaCodecBridgeBuilder_createVideoEncoder);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
          method_id, mime.obj(), as_jint(width), as_jint(height), as_jint(bitRate),
              as_jint(frameRate), as_jint(iFrameInterval), as_jint(colorFormat));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaCodecBridgeBuilder_createAudioDecoder = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecBridgeBuilder_createAudioDecoder(JNIEnv* env, const
    base::android::JavaRef<jstring>& mime,
    const base::android::JavaRef<jobject>& mediaCrypto,
    JniIntWrapper sampleRate,
    JniIntWrapper channelCount,
    const base::android::JavaRef<jbyteArray>& csd0,
    const base::android::JavaRef<jbyteArray>& csd1,
    const base::android::JavaRef<jbyteArray>& csd2,
    jboolean frameHasAdtsHeader) {
  CHECK_CLAZZ(env, org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
      org_chromium_media_MediaCodecBridgeBuilder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
          "createAudioDecoder",
"(Ljava/lang/String;Landroid/media/MediaCrypto;II[B[B[BZ)Lorg/chromium/media/MediaCodecBridge;",
          &g_org_chromium_media_MediaCodecBridgeBuilder_createAudioDecoder);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_media_MediaCodecBridgeBuilder_clazz(env),
          method_id, mime.obj(), mediaCrypto.obj(), as_jint(sampleRate), as_jint(channelCount),
              csd0.obj(), csd1.obj(), csd2.obj(), frameHasAdtsHeader);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace media

#endif  // org_chromium_media_MediaCodecBridgeBuilder_JNI
