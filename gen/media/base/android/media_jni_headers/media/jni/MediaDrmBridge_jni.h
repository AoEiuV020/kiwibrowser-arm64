// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaDrmBridge

#ifndef org_chromium_media_MediaDrmBridge_JNI
#define org_chromium_media_MediaDrmBridge_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_MediaDrmBridge[];
const char kClassPath_org_chromium_media_MediaDrmBridge[] = "org/chromium/media/MediaDrmBridge";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_media_MediaDrmBridge_00024KeyStatus[];
const char kClassPath_org_chromium_media_MediaDrmBridge_00024KeyStatus[] =
    "org/chromium/media/MediaDrmBridge$KeyStatus";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_clazz = 0;
#ifndef org_chromium_media_MediaDrmBridge_clazz_defined
#define org_chromium_media_MediaDrmBridge_clazz_defined
inline jclass org_chromium_media_MediaDrmBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_MediaDrmBridge,
      &g_org_chromium_media_MediaDrmBridge_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz = 0;
#ifndef org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz_defined
#define org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz_defined
inline jclass org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_media_MediaDrmBridge_00024KeyStatus,
      &g_org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnMediaCryptoReady(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jobject mediaCrypto) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaCryptoReady");
  return native->OnMediaCryptoReady(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, mediaCrypto));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnStartProvisioning(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jstring defaultUrl,
    jbyteArray requestData) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnStartProvisioning");
  return native->OnStartProvisioning(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, defaultUrl),
      base::android::JavaParamRef<jbyteArray>(env, requestData));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnPromiseResolved(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jlong promiseId) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPromiseResolved");
  return native->OnPromiseResolved(env, base::android::JavaParamRef<jobject>(env, jcaller),
      promiseId);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnPromiseResolvedWithSession(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jlong promiseId,
    jbyteArray emeSessionId) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPromiseResolvedWithSession");
  return native->OnPromiseResolvedWithSession(env, base::android::JavaParamRef<jobject>(env,
      jcaller), promiseId, base::android::JavaParamRef<jbyteArray>(env, emeSessionId));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnPromiseRejected(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jlong promiseId,
    jstring errorMessage) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPromiseRejected");
  return native->OnPromiseRejected(env, base::android::JavaParamRef<jobject>(env, jcaller),
      promiseId, base::android::JavaParamRef<jstring>(env, errorMessage));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnSessionMessage(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jbyteArray emeSessionId,
    jint requestType,
    jbyteArray message) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSessionMessage");
  return native->OnSessionMessage(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jbyteArray>(env, emeSessionId), requestType,
      base::android::JavaParamRef<jbyteArray>(env, message));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnSessionClosed(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jbyteArray emeSessionId) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSessionClosed");
  return native->OnSessionClosed(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jbyteArray>(env, emeSessionId));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnSessionKeysChange(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jbyteArray emeSessionId,
    jobjectArray keysInfo,
    jboolean hasAdditionalUsableKey,
    jboolean isKeyRelease) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSessionKeysChange");
  return native->OnSessionKeysChange(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jbyteArray>(env, emeSessionId),
      base::android::JavaParamRef<jobjectArray>(env, keysInfo), hasAdditionalUsableKey,
      isKeyRelease);
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_MediaDrmBridge_nativeOnSessionExpirationUpdate(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jbyteArray emeSessionId,
    jlong expirationTime) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSessionExpirationUpdate");
  return native->OnSessionExpirationUpdate(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jbyteArray>(env, emeSessionId), expirationTime);
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_media_MediaDrmBridge_nativeOnResetDeviceCredentialsCompleted(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaDrmBridge,
    jboolean success) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnResetDeviceCredentialsCompleted");
  return native->OnResetDeviceCredentialsCompleted(env, base::android::JavaParamRef<jobject>(env,
      jcaller), success);
}


static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_00024KeyStatus_getKeyId = 0;
static base::android::ScopedJavaLocalRef<jbyteArray> Java_KeyStatus_getKeyId(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(env),
          "getKeyId",
          "()[B",
          &g_org_chromium_media_MediaDrmBridge_00024KeyStatus_getKeyId);

  jbyteArray ret =
      static_cast<jbyteArray>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_00024KeyStatus_getStatusCode =
    0;
static jint Java_KeyStatus_getStatusCode(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(env),
          "getStatusCode",
          "()I",
          &g_org_chromium_media_MediaDrmBridge_00024KeyStatus_getStatusCode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_isCryptoSchemeSupported = 0;
static jboolean Java_MediaDrmBridge_isCryptoSchemeSupported(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& schemeUUID,
    const base::android::JavaRef<jstring>& containerMimeType) {
  CHECK_CLAZZ(env, org_chromium_media_MediaDrmBridge_clazz(env),
      org_chromium_media_MediaDrmBridge_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "isCryptoSchemeSupported",
          "([BLjava/lang/String;)Z",
          &g_org_chromium_media_MediaDrmBridge_isCryptoSchemeSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(org_chromium_media_MediaDrmBridge_clazz(env),
          method_id, schemeUUID.obj(), containerMimeType.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_MediaDrmBridge_create(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& schemeUUID,
    const base::android::JavaRef<jstring>& securityOrigin,
    const base::android::JavaRef<jstring>& securityLevel,
    jboolean requiresMediaCrypto,
    jlong nativeMediaDrmBridge,
    jlong nativeMediaDrmStorageBridge) {
  CHECK_CLAZZ(env, org_chromium_media_MediaDrmBridge_clazz(env),
      org_chromium_media_MediaDrmBridge_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "create",
          "([BLjava/lang/String;Ljava/lang/String;ZJJ)Lorg/chromium/media/MediaDrmBridge;",
          &g_org_chromium_media_MediaDrmBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_media_MediaDrmBridge_clazz(env),
          method_id, schemeUUID.obj(), securityOrigin.obj(), securityLevel.obj(),
              requiresMediaCrypto, nativeMediaDrmBridge, nativeMediaDrmStorageBridge);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_setServerCertificate = 0;
static jboolean Java_MediaDrmBridge_setServerCertificate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jbyteArray>& certificate) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "setServerCertificate",
          "([B)Z",
          &g_org_chromium_media_MediaDrmBridge_setServerCertificate);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, certificate.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_resetDeviceCredentials = 0;
static void Java_MediaDrmBridge_resetDeviceCredentials(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "resetDeviceCredentials",
          "()V",
          &g_org_chromium_media_MediaDrmBridge_resetDeviceCredentials);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_unprovision = 0;
static void Java_MediaDrmBridge_unprovision(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "unprovision",
          "()V",
          &g_org_chromium_media_MediaDrmBridge_unprovision);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_destroy = 0;
static void Java_MediaDrmBridge_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "destroy",
          "()V",
          &g_org_chromium_media_MediaDrmBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_createSessionFromNative = 0;
static void Java_MediaDrmBridge_createSessionFromNative(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jbyteArray>& initData,
    const base::android::JavaRef<jstring>& mime,
    JniIntWrapper keyType,
    const base::android::JavaRef<jobjectArray>& optionalParamsArray,
    jlong promiseId) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "createSessionFromNative",
          "([BLjava/lang/String;I[Ljava/lang/String;J)V",
          &g_org_chromium_media_MediaDrmBridge_createSessionFromNative);

     env->CallVoidMethod(obj.obj(),
          method_id, initData.obj(), mime.obj(), as_jint(keyType), optionalParamsArray.obj(),
              promiseId);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_closeSession = 0;
static void Java_MediaDrmBridge_closeSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jbyteArray>& emeSessionId,
    jlong promiseId) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "closeSession",
          "([BJ)V",
          &g_org_chromium_media_MediaDrmBridge_closeSession);

     env->CallVoidMethod(obj.obj(),
          method_id, emeSessionId.obj(), promiseId);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_updateSession = 0;
static void Java_MediaDrmBridge_updateSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jbyteArray>& emeSessionId,
    const base::android::JavaRef<jbyteArray>& response,
    jlong promiseId) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "updateSession",
          "([B[BJ)V",
          &g_org_chromium_media_MediaDrmBridge_updateSession);

     env->CallVoidMethod(obj.obj(),
          method_id, emeSessionId.obj(), response.obj(), promiseId);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_loadSession = 0;
static void Java_MediaDrmBridge_loadSession(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jbyteArray>& emeId,
    jlong promiseId) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "loadSession",
          "([BJ)V",
          &g_org_chromium_media_MediaDrmBridge_loadSession);

     env->CallVoidMethod(obj.obj(),
          method_id, emeId.obj(), promiseId);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_removeSession = 0;
static void Java_MediaDrmBridge_removeSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jbyteArray>& emeId,
    jlong promiseId) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "removeSession",
          "([BJ)V",
          &g_org_chromium_media_MediaDrmBridge_removeSession);

     env->CallVoidMethod(obj.obj(),
          method_id, emeId.obj(), promiseId);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_getSecurityLevel = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_MediaDrmBridge_getSecurityLevel(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "getSecurityLevel",
          "()Ljava/lang/String;",
          &g_org_chromium_media_MediaDrmBridge_getSecurityLevel);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_MediaDrmBridge_processProvisionResponse = 0;
static void Java_MediaDrmBridge_processProvisionResponse(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isResponseReceived,
    const base::android::JavaRef<jbyteArray>& response) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_MediaDrmBridge_clazz(env),
          "processProvisionResponse",
          "(Z[B)V",
          &g_org_chromium_media_MediaDrmBridge_processProvisionResponse);

     env->CallVoidMethod(obj.obj(),
          method_id, isResponseReceived, response.obj());
  jni_generator::CheckException(env);
}

}  // namespace media

#endif  // org_chromium_media_MediaDrmBridge_JNI
