// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/AudioRecordInput

#ifndef org_chromium_media_AudioRecordInput_JNI
#define org_chromium_media_AudioRecordInput_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_AudioRecordInput[];
const char kClassPath_org_chromium_media_AudioRecordInput[] = "org/chromium/media/AudioRecordInput";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_media_AudioRecordInput_clazz = 0;
#ifndef org_chromium_media_AudioRecordInput_clazz_defined
#define org_chromium_media_AudioRecordInput_clazz_defined
inline jclass org_chromium_media_AudioRecordInput_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_AudioRecordInput,
      &g_org_chromium_media_AudioRecordInput_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {

JNI_GENERATOR_EXPORT void Java_org_chromium_media_AudioRecordInput_nativeCacheDirectBufferAddress(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAudioRecordInputStream,
    jobject buffer) {
  AudioRecordInputStream* native =
      reinterpret_cast<AudioRecordInputStream*>(nativeAudioRecordInputStream);
  CHECK_NATIVE_PTR(env, jcaller, native, "CacheDirectBufferAddress");
  return native->CacheDirectBufferAddress(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, buffer));
}

JNI_GENERATOR_EXPORT void Java_org_chromium_media_AudioRecordInput_nativeOnData(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAudioRecordInputStream,
    jint size,
    jint hardwareDelayMs) {
  AudioRecordInputStream* native =
      reinterpret_cast<AudioRecordInputStream*>(nativeAudioRecordInputStream);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnData");
  return native->OnData(env, base::android::JavaParamRef<jobject>(env, jcaller), size,
      hardwareDelayMs);
}


static base::subtle::AtomicWord g_org_chromium_media_AudioRecordInput_createAudioRecordInput = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_AudioRecordInput_createAudioRecordInput(JNIEnv* env, jlong nativeAudioRecordInputStream,
    JniIntWrapper sampleRate,
    JniIntWrapper channels,
    JniIntWrapper bitsPerSample,
    JniIntWrapper bytesPerBuffer,
    jboolean usePlatformAEC) {
  CHECK_CLAZZ(env, org_chromium_media_AudioRecordInput_clazz(env),
      org_chromium_media_AudioRecordInput_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_media_AudioRecordInput_clazz(env),
          "createAudioRecordInput",
          "(JIIIIZ)Lorg/chromium/media/AudioRecordInput;",
          &g_org_chromium_media_AudioRecordInput_createAudioRecordInput);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_media_AudioRecordInput_clazz(env),
          method_id, nativeAudioRecordInputStream, as_jint(sampleRate), as_jint(channels),
              as_jint(bitsPerSample), as_jint(bytesPerBuffer), usePlatformAEC);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_media_AudioRecordInput_open = 0;
static jboolean Java_AudioRecordInput_open(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioRecordInput_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_AudioRecordInput_clazz(env),
          "open",
          "()Z",
          &g_org_chromium_media_AudioRecordInput_open);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_chromium_media_AudioRecordInput_start = 0;
static void Java_AudioRecordInput_start(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioRecordInput_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_AudioRecordInput_clazz(env),
          "start",
          "()V",
          &g_org_chromium_media_AudioRecordInput_start);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_AudioRecordInput_stop = 0;
static void Java_AudioRecordInput_stop(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioRecordInput_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_AudioRecordInput_clazz(env),
          "stop",
          "()V",
          &g_org_chromium_media_AudioRecordInput_stop);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_chromium_media_AudioRecordInput_close = 0;
static void Java_AudioRecordInput_close(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioRecordInput_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_chromium_media_AudioRecordInput_clazz(env),
          "close",
          "()V",
          &g_org_chromium_media_AudioRecordInput_close);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace media

#endif  // org_chromium_media_AudioRecordInput_JNI
