// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/variations/VariationsAssociatedData

#ifndef org_chromium_components_variations_VariationsAssociatedData_JNI
#define org_chromium_components_variations_VariationsAssociatedData_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_variations_VariationsAssociatedData[];
const char kClassPath_org_chromium_components_variations_VariationsAssociatedData[] =
    "org/chromium/components/variations/VariationsAssociatedData";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_components_variations_VariationsAssociatedData_clazz = 0;
#ifndef org_chromium_components_variations_VariationsAssociatedData_clazz_defined
#define org_chromium_components_variations_VariationsAssociatedData_clazz_defined
inline jclass org_chromium_components_variations_VariationsAssociatedData_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_variations_VariationsAssociatedData,
      &g_org_chromium_components_variations_VariationsAssociatedData_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace variations {
namespace android {

static base::android::ScopedJavaLocalRef<jstring>
    JNI_VariationsAssociatedData_GetVariationParamValue(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& trialName,
    const base::android::JavaParamRef<jstring>& paramName);

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_components_variations_VariationsAssociatedData_nativeGetVariationParamValue(
    JNIEnv* env,
    jclass jcaller,
    jstring trialName,
    jstring paramName) {
  return JNI_VariationsAssociatedData_GetVariationParamValue(env,
      base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env,
      trialName), base::android::JavaParamRef<jstring>(env, paramName)).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_VariationsAssociatedData_GetFeedbackVariations(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_components_variations_VariationsAssociatedData_nativeGetFeedbackVariations(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_VariationsAssociatedData_GetFeedbackVariations(env,
      base::android::JavaParamRef<jclass>(env, jcaller)).Release();
}


}  // namespace android
}  // namespace variations

#endif  // org_chromium_components_variations_VariationsAssociatedData_JNI
