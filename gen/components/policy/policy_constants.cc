//
// DO NOT MODIFY THIS FILE DIRECTLY!
// IT IS GENERATED BY generate_policy_source.py
// FROM ../../components/policy/resources/policy_templates.json
//

#include "components/policy/policy_constants.h"

#include <algorithm>
#include <climits>
#include <memory>

#include "base/logging.h"
#include "components/policy/core/common/policy_types.h"
#include "components/policy/core/common/schema_internal.h"
#include "components/policy/risk_tag.h"

namespace policy {

const PolicyDetails kChromePolicyDetails[] = {
//  is_deprecated  is_device_policy  id    max_external_data_size
  // AllowedDomainsForApps
  { false,         false,           331,                        0,
    { RISK_TAG_FILTERING, RISK_TAG_NONE } },
  // AlternateErrorPagesEnabled
  { false,         false,             5,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // AuthAndroidNegotiateAccountType
  { false,         false,           305,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // AuthNegotiateDelegateWhitelist
  { false,         false,            30,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // AuthSchemes
  { false,         false,            26,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // AuthServerWhitelist
  { false,         false,            29,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // AutoFillEnabled
  { false,         false,            18,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // AutofillCreditCardEnabled
  { false,         false,           392,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // CertificateTransparencyEnforcementDisabledForCas
  { false,         false,           435,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // CertificateTransparencyEnforcementDisabledForLegacyCas
  { false,         false,           436,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // CertificateTransparencyEnforcementDisabledForUrls
  { false,         false,           335,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // ContextualSearchEnabled
  { false,         false,           281,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // CookiesAllowedForUrls
  { false,         false,            77,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // CookiesBlockedForUrls
  { false,         false,            67,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // CookiesSessionOnlyForUrls
  { false,         false,            68,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DataCompressionProxyEnabled
  { false,         false,           241,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultCookiesSetting
  { false,         false,            48,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultGeolocationSetting
  { false,         false,            54,                        0,
    { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE } },
  // DefaultImagesSetting
  { false,         false,            49,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultJavaScriptSetting
  { false,         false,            50,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultPopupsSetting
  { false,         false,            52,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderAlternateURLs
  { false,         false,           161,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderEnabled
  { false,         false,            40,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderEncodings
  { false,         false,            47,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderIconURL
  { false,         false,            46,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderImageURL
  { false,         false,           229,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderImageURLPostParams
  { false,         false,           233,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderKeyword
  { false,         false,            42,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderName
  { false,         false,            41,                        0,
    { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE } },
  // DefaultSearchProviderNewTabURL
  { false,         false,           237,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderSearchURL
  { false,         false,            43,                        0,
    { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE } },
  // DefaultSearchProviderSearchURLPostParams
  { false,         false,           230,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderSuggestURL
  { false,         false,            44,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderSuggestURLPostParams
  { false,         false,           231,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultWebBluetoothGuardSetting
  { false,         false,           320,                        0,
    { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE } },
  // DefaultWebUsbGuardSetting
  { false,         false,           434,                        0,
    { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE } },
  // DisableAuthNegotiateCnameLookup
  { false,         false,            27,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // DisableSafeBrowsingProceedAnyway
  { false,         false,           150,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // EditBookmarksEnabled
  { false,         false,            83,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // EnableDeprecatedWebPlatformFeatures
  { false,         false,           270,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // EnableMediaRouter
  { false,         false,           333,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // EnableSha1ForLocalAnchors
  { false,         false,           340,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // EnableSymantecLegacyInfrastructure
  { false,         false,           413,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // ExtensionAllowedTypes
  { false,         false,           168,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ExtensionInstallBlacklist
  { false,         false,            32,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ExtensionInstallForcelist
  { false,         false,            34,                        0,
    { RISK_TAG_FULL_ADMIN_ACCESS, RISK_TAG_NONE } },
  // ExtensionInstallSources
  { false,         false,           148,                        0,
    { RISK_TAG_FULL_ADMIN_ACCESS, RISK_TAG_SYSTEM_SECURITY } },
  // ExtensionInstallWhitelist
  { false,         false,            33,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ExtensionSettings
  { false,         false,           278,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ForceBrowserSignin
  { false,         false,           346,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ForceGoogleSafeSearch
  { false,         false,           282,                        0,
    { RISK_TAG_FILTERING, RISK_TAG_NONE } },
  // ForceSafeSearch
  { true,          false,           162,                        0,
    { RISK_TAG_FILTERING, RISK_TAG_NONE } },
  // ForceYouTubeRestrict
  { false,         false,           348,                        0,
    { RISK_TAG_FILTERING, RISK_TAG_NONE } },
  // ForceYouTubeSafetyMode
  { true,          false,           283,                        0,
    { RISK_TAG_FILTERING, RISK_TAG_NONE } },
  // ImagesAllowedForUrls
  { false,         false,            69,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ImagesBlockedForUrls
  { false,         false,            70,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // IncognitoEnabled
  { true,          false,            10,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // IncognitoModeAvailability
  { false,         false,            93,                        0,
    { RISK_TAG_FILTERING, RISK_TAG_NONE } },
  // IsolateOriginsAndroid
  { false,         false,           445,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // JavaScriptAllowedForUrls
  { false,         false,            71,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // JavaScriptBlockedForUrls
  { false,         false,            72,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // JavascriptEnabled
  { true,          false,             9,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ManagedBookmarks
  { false,         false,           227,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // NTPContentSuggestionsEnabled
  { false,         false,           338,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // NetworkPredictionOptions
  { false,         false,           273,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // NtlmV2Enabled
  { false,         false,           393,                        0,
    { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE } },
  // PasswordManagerEnabled
  { false,         false,            16,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // PopupsAllowedForUrls
  { false,         false,            75,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // PopupsBlockedForUrls
  { false,         false,            76,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // PrintingEnabled
  { false,         false,            12,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyBypassList
  { false,         false,            25,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyMode
  { false,         false,            21,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyPacUrl
  { false,         false,            24,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyServer
  { false,         false,            23,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyServerMode
  { true,          false,            22,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxySettings
  { false,         false,           116,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // RestrictAccountsToPatterns
  { false,         false,           410,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // SSLErrorOverrideAllowed
  { false,         false,           300,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // SSLVersionMax
  { false,         false,           361,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // SSLVersionMin
  { false,         false,           279,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // SafeBrowsingEnabled
  { false,         false,            14,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // SavingBrowserHistoryDisabled
  { false,         false,            11,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // SearchSuggestEnabled
  { false,         false,             6,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // SigninAllowed
  { true,          false,           190,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // SitePerProcessAndroid
  { false,         false,           446,                        0,
    { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE } },
  // SupervisedUserContentProviderEnabled
  { false,         false,           312,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // TranslateEnabled
  { false,         false,            80,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // URLBlacklist
  { false,         false,           103,                        0,
    { RISK_TAG_FILTERING, RISK_TAG_NONE } },
  // URLWhitelist
  { false,         false,           104,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // VariationsRestrictParameter
  { false,         false,           196,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebRtcUdpPortRange
  { false,         false,           339,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebUsbAskForUrls
  { false,         false,           439,                        0,
    { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE } },
  // WebUsbBlockedForUrls
  { false,         false,           440,                        0,
    { RISK_TAG_NONE, RISK_TAG_NONE } },
};

const internal::SchemaNode kSchemas[] = {
//  Type                          Extra
  { base::Value::Type::DICTIONARY,    6 },  // root node
  { base::Value::Type::STRING,       -1 },  // simple type: string
  { base::Value::Type::BOOLEAN,      -1 },  // simple type: boolean
  { base::Value::Type::LIST,          1 },  // simple type: stringlist
  { base::Value::Type::INTEGER,       0 },  // integer with enumeration restriction: DefaultCookiesSetting
  { base::Value::Type::INTEGER,       1 },  // integer with enumeration restriction (use range instead): DefaultGeolocationSetting
  { base::Value::Type::INTEGER,       2 },  // integer with enumeration restriction (use range instead): DefaultImagesSetting
  { base::Value::Type::INTEGER,       2 },  // integer with enumeration restriction (use range instead): DefaultJavaScriptSetting
  { base::Value::Type::INTEGER,       2 },  // integer with enumeration restriction (use range instead): DefaultPopupsSetting
  { base::Value::Type::INTEGER,       3 },  // integer with enumeration restriction (use range instead): DefaultWebBluetoothGuardSetting
  { base::Value::Type::INTEGER,       3 },  // integer with enumeration restriction (use range instead): DefaultWebUsbGuardSetting
  { base::Value::Type::DICTIONARY,    3 },  // ExtensionSettings
  { base::Value::Type::DICTIONARY,    0 },  // *
  { base::Value::Type::STRING,        4 },  // string with enumeration restriction: installation_mode
  { base::Value::Type::DICTIONARY,    1 },  // ^update_url:
  { base::Value::Type::STRING,        5 },  // string with enumeration restriction: installation_mode
  { base::Value::Type::DICTIONARY,    2 },  // ^[a-p]{32}$
  { base::Value::Type::STRING,        6 },  // string with enumeration restriction: installation_mode
  { base::Value::Type::STRING,        7 },  // string with pattern restriction: minimum_version_required
  { base::Value::Type::INTEGER,       8 },  // integer with enumeration restriction (use range instead): ForceYouTubeRestrict
  { base::Value::Type::INTEGER,       8 },  // integer with enumeration restriction (use range instead): IncognitoModeAvailability
  { base::Value::Type::DICTIONARY,    4 },  // items of ManagedBookmarks
  { base::Value::Type::LIST,         21 },  // 
  { base::Value::Type::LIST,         21 },  // 
  { base::Value::Type::INTEGER,       8 },  // integer with enumeration restriction (use range instead): NetworkPredictionOptions
  { base::Value::Type::STRING,        9 },  // string with enumeration restriction: ProxyMode
  { base::Value::Type::INTEGER,      10 },  // integer with enumeration restriction (use range instead): ProxyServerMode
  { base::Value::Type::DICTIONARY,    5 },  // ProxySettings
  { base::Value::Type::STRING,       11 },  // string with enumeration restriction: SSLVersionMax
  { base::Value::Type::STRING,       12 },  // string with enumeration restriction: SSLVersionMin
};

const internal::PropertyNode kPropertyNodes[] = {
//  Property                                          #Schema
  { "allowed_types",                                        3 },
  { "blocked_install_message",                              1 },
  { "blocked_permissions",                                  3 },
  { "install_sources",                                      3 },
  { "installation_mode",                                   13 },
  { "runtime_allowed_hosts",                                3 },
  { "runtime_blocked_hosts",                                3 },
  { "allowed_permissions",                                  3 },
  { "blocked_permissions",                                  3 },
  { "installation_mode",                                   15 },
  { "allowed_permissions",                                  3 },
  { "blocked_install_message",                              1 },
  { "blocked_permissions",                                  3 },
  { "installation_mode",                                   17 },
  { "minimum_version_required",                            18 },
  { "runtime_allowed_hosts",                                3 },
  { "runtime_blocked_hosts",                                3 },
  { "update_url",                                           1 },
  { "*",                                                   12 },
  { "^update_url:",                                        14 },
  { "^[a-p]{32}$",                                         16 },
  { "children",                                            22 },
  { "name",                                                 1 },
  { "toplevel_name",                                        1 },
  { "url",                                                  1 },
  { key::kProxyBypassList,                                  1 },
  { key::kProxyMode,                                        1 },
  { key::kProxyPacUrl,                                      1 },
  { key::kProxyServer,                                      1 },
  { key::kProxyServerMode,                                  1 },
  { key::kAllowedDomainsForApps,                            1 },
  { key::kAlternateErrorPagesEnabled,                       2 },
  { key::kAuthAndroidNegotiateAccountType,                  1 },
  { key::kAuthNegotiateDelegateWhitelist,                   1 },
  { key::kAuthSchemes,                                      1 },
  { key::kAuthServerWhitelist,                              1 },
  { key::kAutoFillEnabled,                                  2 },
  { key::kAutofillCreditCardEnabled,                        2 },
  { key::kCertificateTransparencyEnforcementDisabledForCas,      3 },
  { key::kCertificateTransparencyEnforcementDisabledForLegacyCas,      3 },
  { key::kCertificateTransparencyEnforcementDisabledForUrls,      3 },
  { key::kContextualSearchEnabled,                          2 },
  { key::kCookiesAllowedForUrls,                            3 },
  { key::kCookiesBlockedForUrls,                            3 },
  { key::kCookiesSessionOnlyForUrls,                        3 },
  { key::kDataCompressionProxyEnabled,                      2 },
  { key::kDefaultCookiesSetting,                            4 },
  { key::kDefaultGeolocationSetting,                        5 },
  { key::kDefaultImagesSetting,                             6 },
  { key::kDefaultJavaScriptSetting,                         7 },
  { key::kDefaultPopupsSetting,                             8 },
  { key::kDefaultSearchProviderAlternateURLs,               3 },
  { key::kDefaultSearchProviderEnabled,                     2 },
  { key::kDefaultSearchProviderEncodings,                   3 },
  { key::kDefaultSearchProviderIconURL,                     1 },
  { key::kDefaultSearchProviderImageURL,                    1 },
  { key::kDefaultSearchProviderImageURLPostParams,          1 },
  { key::kDefaultSearchProviderKeyword,                     1 },
  { key::kDefaultSearchProviderName,                        1 },
  { key::kDefaultSearchProviderNewTabURL,                   1 },
  { key::kDefaultSearchProviderSearchURL,                   1 },
  { key::kDefaultSearchProviderSearchURLPostParams,         1 },
  { key::kDefaultSearchProviderSuggestURL,                  1 },
  { key::kDefaultSearchProviderSuggestURLPostParams,        1 },
  { key::kDefaultWebBluetoothGuardSetting,                  9 },
  { key::kDefaultWebUsbGuardSetting,                       10 },
  { key::kDisableAuthNegotiateCnameLookup,                  2 },
  { key::kDisableSafeBrowsingProceedAnyway,                 2 },
  { key::kEditBookmarksEnabled,                             2 },
  { key::kEnableDeprecatedWebPlatformFeatures,              3 },
  { key::kEnableMediaRouter,                                2 },
  { key::kEnableSha1ForLocalAnchors,                        2 },
  { key::kEnableSymantecLegacyInfrastructure,               2 },
  { key::kExtensionAllowedTypes,                            3 },
  { key::kExtensionInstallBlacklist,                        3 },
  { key::kExtensionInstallForcelist,                        3 },
  { key::kExtensionInstallSources,                          3 },
  { key::kExtensionInstallWhitelist,                        3 },
  { key::kExtensionSettings,                               11 },
  { key::kForceBrowserSignin,                               2 },
  { key::kForceGoogleSafeSearch,                            2 },
  { key::kForceSafeSearch,                                  2 },
  { key::kForceYouTubeRestrict,                            19 },
  { key::kForceYouTubeSafetyMode,                           2 },
  { key::kImagesAllowedForUrls,                             3 },
  { key::kImagesBlockedForUrls,                             3 },
  { key::kIncognitoEnabled,                                 2 },
  { key::kIncognitoModeAvailability,                       20 },
  { key::kIsolateOriginsAndroid,                            1 },
  { key::kJavaScriptAllowedForUrls,                         3 },
  { key::kJavaScriptBlockedForUrls,                         3 },
  { key::kJavascriptEnabled,                                2 },
  { key::kManagedBookmarks,                                23 },
  { key::kNTPContentSuggestionsEnabled,                     2 },
  { key::kNetworkPredictionOptions,                        24 },
  { key::kNtlmV2Enabled,                                    2 },
  { key::kPasswordManagerEnabled,                           2 },
  { key::kPopupsAllowedForUrls,                             3 },
  { key::kPopupsBlockedForUrls,                             3 },
  { key::kPrintingEnabled,                                  2 },
  { key::kProxyBypassList,                                  1 },
  { key::kProxyMode,                                       25 },
  { key::kProxyPacUrl,                                      1 },
  { key::kProxyServer,                                      1 },
  { key::kProxyServerMode,                                 26 },
  { key::kProxySettings,                                   27 },
  { key::kRestrictAccountsToPatterns,                       3 },
  { key::kSSLErrorOverrideAllowed,                          2 },
  { key::kSSLVersionMax,                                   28 },
  { key::kSSLVersionMin,                                   29 },
  { key::kSafeBrowsingEnabled,                              2 },
  { key::kSavingBrowserHistoryDisabled,                     2 },
  { key::kSearchSuggestEnabled,                             2 },
  { key::kSigninAllowed,                                    2 },
  { key::kSitePerProcessAndroid,                            2 },
  { key::kSupervisedUserContentProviderEnabled,             2 },
  { key::kTranslateEnabled,                                 2 },
  { key::kURLBlacklist,                                     3 },
  { key::kURLWhitelist,                                     3 },
  { key::kVariationsRestrictParameter,                      1 },
  { key::kWebRtcUdpPortRange,                               1 },
  { key::kWebUsbAskForUrls,                                 3 },
  { key::kWebUsbBlockedForUrls,                             3 },
};

const internal::PropertiesNode kProperties[] = {
//  Begin    End  PatternEnd Additional Properties
  {     0,     7,          7,    -1 },  // *
  {     7,    10,         10,    -1 },  // ^update_url:
  {    10,    18,         18,    -1 },  // ^[a-p]{32}$
  {    18,    19,         21,    -1 },  // ExtensionSettings
  {    21,    25,         25,    -1 },  // items of ManagedBookmarks
  {    25,    30,         30,    -1 },  // ProxySettings
  {    30,   123,        123,    -1 },  // root node
};

const internal::RestrictionNode kRestrictionNodes[] = {
//   FIRST, SECOND
  {{ 0,          3}},
  {{ 3,          1}},
  {{ 2,          1}},
  {{ 3,          2}},
  {{ 0,          2}},
  {{ 2,          4}},
  {{ 4,          8}},
  {{ 8,          8}},
  {{ 2,          0}},
  {{ 9,         14}},
  {{ 3,          0}},
  {{ 14,        16}},
  {{ 16,        19}},
};

const int kIntegerEnumerations[] = {
  1,
  2,
  4,
};

const char* const kStringEnumerations[] = {
  "blocked",
  "allowed",
  "blocked",
  "allowed",
  "blocked",
  "allowed",
  "force_installed",
  "normal_installed",
  "^[0-9]+([.][0-9]+)*$",
  "direct",
  "auto_detect",
  "pac_script",
  "fixed_servers",
  "system",
  "tls1.2",
  "tls1.3",
  "tls1",
  "tls1.1",
  "tls1.2",
};

const internal::SchemaData kChromeSchemaData = {
  kSchemas,
  kPropertyNodes,
  kProperties,
  kRestrictionNodes,
  kIntegerEnumerations,
  kStringEnumerations,
};


namespace {
bool CompareKeys(const internal::PropertyNode& node,
                 const std::string& key) {
  return node.key < key;
}

}  // namespace

const internal::SchemaData* GetChromeSchemaData() {
  return &kChromeSchemaData;
}

#if defined (OS_CHROMEOS)
void SetEnterpriseUsersDefaults(PolicyMap* policy_map) {
  if (!policy_map->Get(key::kAllowDinosaurEasterEgg)) {
    policy_map->Set(key::kAllowDinosaurEasterEgg,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>(false),
                    nullptr);
  }
  if (!policy_map->Get(key::kArcEnabled)) {
    policy_map->Set(key::kArcEnabled,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>(false),
                    nullptr);
  }
  if (!policy_map->Get(key::kCaptivePortalAuthenticationIgnoresProxy)) {
    policy_map->Set(key::kCaptivePortalAuthenticationIgnoresProxy,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>(false),
                    nullptr);
  }
  if (!policy_map->Get(key::kCastReceiverEnabled)) {
    policy_map->Set(key::kCastReceiverEnabled,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>(false),
                    nullptr);
  }
  if (!policy_map->Get(key::kChromeOsMultiProfileUserBehavior)) {
    policy_map->Set(key::kChromeOsMultiProfileUserBehavior,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>("primary-only"),
                    nullptr);
  }
  if (!policy_map->Get(key::kEasyUnlockAllowed)) {
    policy_map->Set(key::kEasyUnlockAllowed,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>(false),
                    nullptr);
  }
  if (!policy_map->Get(key::kInstantTetheringAllowed)) {
    policy_map->Set(key::kInstantTetheringAllowed,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>(false),
                    nullptr);
  }
  if (!policy_map->Get(key::kNTPContentSuggestionsEnabled)) {
    policy_map->Set(key::kNTPContentSuggestionsEnabled,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>(false),
                    nullptr);
  }
  if (!policy_map->Get(key::kPacHttpsUrlStrippingEnabled)) {
    policy_map->Set(key::kPacHttpsUrlStrippingEnabled,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::make_unique<base::Value>(false),
                    nullptr);
  }
  if (!policy_map->Get(key::kQuickUnlockModeWhitelist)) {
    auto default_value = std::make_unique<base::ListValue>();
    policy_map->Set(key::kQuickUnlockModeWhitelist,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    std::move(default_value),
                    nullptr);
  }
}
#endif

const PolicyDetails* GetChromePolicyDetails(const std::string& policy) {
  // First index in kPropertyNodes of the Chrome policies.
  static const int begin_index = 30;
  // One-past-the-end of the Chrome policies in kPropertyNodes.
  static const int end_index = 123;
  const internal::PropertyNode* begin =
      kPropertyNodes + begin_index;
  const internal::PropertyNode* end = kPropertyNodes + end_index;
  const internal::PropertyNode* it =
      std::lower_bound(begin, end, policy, CompareKeys);
  if (it == end || it->key != policy)
    return NULL;
  // This relies on kPropertyNodes from begin_index to end_index
  // having exactly the same policies (and in the same order) as
  // kChromePolicyDetails, so that binary searching on the first
  // gets the same results as a binary search on the second would.
  // However, kPropertyNodes has the policy names and
  // kChromePolicyDetails doesn't, so we obtain the index into
  // the second array by searching the first to avoid duplicating
  // the policy name pointers.
  // Offsetting |it| from |begin| here obtains the index we're
  // looking for.
  size_t index = it - begin;
  CHECK_LT(index, arraysize(kChromePolicyDetails));
  return kChromePolicyDetails + index;
}

namespace key {

const char kAbusiveExperienceInterventionEnforce[] = "AbusiveExperienceInterventionEnforce";
const char kAdditionalLaunchParameters[] = "AdditionalLaunchParameters";
const char kAdsSettingForIntrusiveAdsSites[] = "AdsSettingForIntrusiveAdsSites";
const char kAllowCrossOriginAuthPrompt[] = "AllowCrossOriginAuthPrompt";
const char kAllowDeletingBrowserHistory[] = "AllowDeletingBrowserHistory";
const char kAllowDinosaurEasterEgg[] = "AllowDinosaurEasterEgg";
const char kAllowFileSelectionDialogs[] = "AllowFileSelectionDialogs";
const char kAllowKioskAppControlChromeVersion[] = "AllowKioskAppControlChromeVersion";
const char kAllowOutdatedPlugins[] = "AllowOutdatedPlugins";
const char kAllowScreenLock[] = "AllowScreenLock";
const char kAllowScreenWakeLocks[] = "AllowScreenWakeLocks";
const char kAllowedDomainsForApps[] = "AllowedDomainsForApps";
const char kAllowedLocales[] = "AllowedLocales";
const char kAlternateErrorPagesEnabled[] = "AlternateErrorPagesEnabled";
const char kAlwaysAuthorizePlugins[] = "AlwaysAuthorizePlugins";
const char kAlwaysOpenPdfExternally[] = "AlwaysOpenPdfExternally";
const char kApplicationLocaleValue[] = "ApplicationLocaleValue";
const char kArcAppInstallEventLoggingEnabled[] = "ArcAppInstallEventLoggingEnabled";
const char kArcBackupRestoreEnabled[] = "ArcBackupRestoreEnabled";
const char kArcBackupRestoreServiceEnabled[] = "ArcBackupRestoreServiceEnabled";
const char kArcCertificatesSyncMode[] = "ArcCertificatesSyncMode";
const char kArcEnabled[] = "ArcEnabled";
const char kArcGoogleLocationServicesEnabled[] = "ArcGoogleLocationServicesEnabled";
const char kArcLocationServiceEnabled[] = "ArcLocationServiceEnabled";
const char kArcPolicy[] = "ArcPolicy";
const char kAttestationEnabledForDevice[] = "AttestationEnabledForDevice";
const char kAttestationEnabledForUser[] = "AttestationEnabledForUser";
const char kAttestationExtensionWhitelist[] = "AttestationExtensionWhitelist";
const char kAttestationForContentProtectionEnabled[] = "AttestationForContentProtectionEnabled";
const char kAudioCaptureAllowed[] = "AudioCaptureAllowed";
const char kAudioCaptureAllowedUrls[] = "AudioCaptureAllowedUrls";
const char kAudioOutputAllowed[] = "AudioOutputAllowed";
const char kAuthAndroidNegotiateAccountType[] = "AuthAndroidNegotiateAccountType";
const char kAuthNegotiateDelegateWhitelist[] = "AuthNegotiateDelegateWhitelist";
const char kAuthSchemes[] = "AuthSchemes";
const char kAuthServerWhitelist[] = "AuthServerWhitelist";
const char kAutoCleanUpStrategy[] = "AutoCleanUpStrategy";
const char kAutoFillEnabled[] = "AutoFillEnabled";
const char kAutoSelectCertificateForUrls[] = "AutoSelectCertificateForUrls";
const char kAutofillCreditCardEnabled[] = "AutofillCreditCardEnabled";
const char kAutoplayAllowed[] = "AutoplayAllowed";
const char kAutoplayWhitelist[] = "AutoplayWhitelist";
const char kBackgroundModeEnabled[] = "BackgroundModeEnabled";
const char kBlockThirdPartyCookies[] = "BlockThirdPartyCookies";
const char kBookmarkBarEnabled[] = "BookmarkBarEnabled";
const char kBrowserAddPersonEnabled[] = "BrowserAddPersonEnabled";
const char kBrowserGuestModeEnabled[] = "BrowserGuestModeEnabled";
const char kBrowserNetworkTimeQueriesEnabled[] = "BrowserNetworkTimeQueriesEnabled";
const char kBuiltInDnsClientEnabled[] = "BuiltInDnsClientEnabled";
const char kCaptivePortalAuthenticationIgnoresProxy[] = "CaptivePortalAuthenticationIgnoresProxy";
const char kCastReceiverEnabled[] = "CastReceiverEnabled";
const char kCastReceiverName[] = "CastReceiverName";
const char kCertificateTransparencyEnforcementDisabledForCas[] = "CertificateTransparencyEnforcementDisabledForCas";
const char kCertificateTransparencyEnforcementDisabledForLegacyCas[] = "CertificateTransparencyEnforcementDisabledForLegacyCas";
const char kCertificateTransparencyEnforcementDisabledForUrls[] = "CertificateTransparencyEnforcementDisabledForUrls";
const char kChromeCleanupEnabled[] = "ChromeCleanupEnabled";
const char kChromeCleanupReportingEnabled[] = "ChromeCleanupReportingEnabled";
const char kChromeFrameContentTypes[] = "ChromeFrameContentTypes";
const char kChromeFrameRendererSettings[] = "ChromeFrameRendererSettings";
const char kChromeOsLockOnIdleSuspend[] = "ChromeOsLockOnIdleSuspend";
const char kChromeOsMultiProfileUserBehavior[] = "ChromeOsMultiProfileUserBehavior";
const char kChromeOsReleaseChannel[] = "ChromeOsReleaseChannel";
const char kChromeOsReleaseChannelDelegated[] = "ChromeOsReleaseChannelDelegated";
const char kClearSiteDataOnExit[] = "ClearSiteDataOnExit";
const char kCloudPolicyOverridesMachinePolicy[] = "CloudPolicyOverridesMachinePolicy";
const char kCloudPrintProxyEnabled[] = "CloudPrintProxyEnabled";
const char kCloudPrintSubmitEnabled[] = "CloudPrintSubmitEnabled";
const char kComponentUpdatesEnabled[] = "ComponentUpdatesEnabled";
const char kContentPackDefaultFilteringBehavior[] = "ContentPackDefaultFilteringBehavior";
const char kContentPackManualBehaviorHosts[] = "ContentPackManualBehaviorHosts";
const char kContentPackManualBehaviorURLs[] = "ContentPackManualBehaviorURLs";
const char kContextualSearchEnabled[] = "ContextualSearchEnabled";
const char kCookiesAllowedForUrls[] = "CookiesAllowedForUrls";
const char kCookiesBlockedForUrls[] = "CookiesBlockedForUrls";
const char kCookiesSessionOnlyForUrls[] = "CookiesSessionOnlyForUrls";
const char kDHEEnabled[] = "DHEEnabled";
const char kDataCompressionProxyEnabled[] = "DataCompressionProxyEnabled";
const char kDefaultBrowserSettingEnabled[] = "DefaultBrowserSettingEnabled";
const char kDefaultCookiesSetting[] = "DefaultCookiesSetting";
const char kDefaultDownloadDirectory[] = "DefaultDownloadDirectory";
const char kDefaultGeolocationSetting[] = "DefaultGeolocationSetting";
const char kDefaultImagesSetting[] = "DefaultImagesSetting";
const char kDefaultJavaScriptSetting[] = "DefaultJavaScriptSetting";
const char kDefaultKeygenSetting[] = "DefaultKeygenSetting";
const char kDefaultMediaStreamSetting[] = "DefaultMediaStreamSetting";
const char kDefaultNotificationsSetting[] = "DefaultNotificationsSetting";
const char kDefaultPluginsSetting[] = "DefaultPluginsSetting";
const char kDefaultPopupsSetting[] = "DefaultPopupsSetting";
const char kDefaultPrinterSelection[] = "DefaultPrinterSelection";
const char kDefaultSearchProviderAlternateURLs[] = "DefaultSearchProviderAlternateURLs";
const char kDefaultSearchProviderEnabled[] = "DefaultSearchProviderEnabled";
const char kDefaultSearchProviderEncodings[] = "DefaultSearchProviderEncodings";
const char kDefaultSearchProviderIconURL[] = "DefaultSearchProviderIconURL";
const char kDefaultSearchProviderImageURL[] = "DefaultSearchProviderImageURL";
const char kDefaultSearchProviderImageURLPostParams[] = "DefaultSearchProviderImageURLPostParams";
const char kDefaultSearchProviderInstantURL[] = "DefaultSearchProviderInstantURL";
const char kDefaultSearchProviderInstantURLPostParams[] = "DefaultSearchProviderInstantURLPostParams";
const char kDefaultSearchProviderKeyword[] = "DefaultSearchProviderKeyword";
const char kDefaultSearchProviderName[] = "DefaultSearchProviderName";
const char kDefaultSearchProviderNewTabURL[] = "DefaultSearchProviderNewTabURL";
const char kDefaultSearchProviderSearchTermsReplacementKey[] = "DefaultSearchProviderSearchTermsReplacementKey";
const char kDefaultSearchProviderSearchURL[] = "DefaultSearchProviderSearchURL";
const char kDefaultSearchProviderSearchURLPostParams[] = "DefaultSearchProviderSearchURLPostParams";
const char kDefaultSearchProviderSuggestURL[] = "DefaultSearchProviderSuggestURL";
const char kDefaultSearchProviderSuggestURLPostParams[] = "DefaultSearchProviderSuggestURLPostParams";
const char kDefaultWebBluetoothGuardSetting[] = "DefaultWebBluetoothGuardSetting";
const char kDefaultWebUsbGuardSetting[] = "DefaultWebUsbGuardSetting";
const char kDeveloperToolsAvailability[] = "DeveloperToolsAvailability";
const char kDeveloperToolsDisabled[] = "DeveloperToolsDisabled";
const char kDeviceAllowBluetooth[] = "DeviceAllowBluetooth";
const char kDeviceAllowNewUsers[] = "DeviceAllowNewUsers";
const char kDeviceAllowRedeemChromeOsRegistrationOffers[] = "DeviceAllowRedeemChromeOsRegistrationOffers";
const char kDeviceAppPack[] = "DeviceAppPack";
const char kDeviceAutoUpdateDisabled[] = "DeviceAutoUpdateDisabled";
const char kDeviceAutoUpdateP2PEnabled[] = "DeviceAutoUpdateP2PEnabled";
const char kDeviceBlockDevmode[] = "DeviceBlockDevmode";
const char kDeviceDataRoamingEnabled[] = "DeviceDataRoamingEnabled";
const char kDeviceEcryptfsMigrationStrategy[] = "DeviceEcryptfsMigrationStrategy";
const char kDeviceEphemeralUsersEnabled[] = "DeviceEphemeralUsersEnabled";
const char kDeviceGuestModeEnabled[] = "DeviceGuestModeEnabled";
const char kDeviceHostnameTemplate[] = "DeviceHostnameTemplate";
const char kDeviceIdleLogoutTimeout[] = "DeviceIdleLogoutTimeout";
const char kDeviceIdleLogoutWarningDuration[] = "DeviceIdleLogoutWarningDuration";
const char kDeviceKerberosEncryptionTypes[] = "DeviceKerberosEncryptionTypes";
const char kDeviceLocalAccountAutoLoginBailoutEnabled[] = "DeviceLocalAccountAutoLoginBailoutEnabled";
const char kDeviceLocalAccountAutoLoginDelay[] = "DeviceLocalAccountAutoLoginDelay";
const char kDeviceLocalAccountAutoLoginId[] = "DeviceLocalAccountAutoLoginId";
const char kDeviceLocalAccountPromptForNetworkWhenOffline[] = "DeviceLocalAccountPromptForNetworkWhenOffline";
const char kDeviceLocalAccounts[] = "DeviceLocalAccounts";
const char kDeviceLoginScreenAppInstallList[] = "DeviceLoginScreenAppInstallList";
const char kDeviceLoginScreenAutoSelectCertificateForUrls[] = "DeviceLoginScreenAutoSelectCertificateForUrls";
const char kDeviceLoginScreenDefaultHighContrastEnabled[] = "DeviceLoginScreenDefaultHighContrastEnabled";
const char kDeviceLoginScreenDefaultLargeCursorEnabled[] = "DeviceLoginScreenDefaultLargeCursorEnabled";
const char kDeviceLoginScreenDefaultScreenMagnifierType[] = "DeviceLoginScreenDefaultScreenMagnifierType";
const char kDeviceLoginScreenDefaultSpokenFeedbackEnabled[] = "DeviceLoginScreenDefaultSpokenFeedbackEnabled";
const char kDeviceLoginScreenDefaultVirtualKeyboardEnabled[] = "DeviceLoginScreenDefaultVirtualKeyboardEnabled";
const char kDeviceLoginScreenDomainAutoComplete[] = "DeviceLoginScreenDomainAutoComplete";
const char kDeviceLoginScreenInputMethods[] = "DeviceLoginScreenInputMethods";
const char kDeviceLoginScreenIsolateOrigins[] = "DeviceLoginScreenIsolateOrigins";
const char kDeviceLoginScreenLocales[] = "DeviceLoginScreenLocales";
const char kDeviceLoginScreenPowerManagement[] = "DeviceLoginScreenPowerManagement";
const char kDeviceLoginScreenSaverId[] = "DeviceLoginScreenSaverId";
const char kDeviceLoginScreenSaverTimeout[] = "DeviceLoginScreenSaverTimeout";
const char kDeviceLoginScreenSitePerProcess[] = "DeviceLoginScreenSitePerProcess";
const char kDeviceMachinePasswordChangeRate[] = "DeviceMachinePasswordChangeRate";
const char kDeviceMetricsReportingEnabled[] = "DeviceMetricsReportingEnabled";
const char kDeviceNativePrinters[] = "DeviceNativePrinters";
const char kDeviceNativePrintersAccessMode[] = "DeviceNativePrintersAccessMode";
const char kDeviceNativePrintersBlacklist[] = "DeviceNativePrintersBlacklist";
const char kDeviceNativePrintersWhitelist[] = "DeviceNativePrintersWhitelist";
const char kDeviceOffHours[] = "DeviceOffHours";
const char kDeviceOpenNetworkConfiguration[] = "DeviceOpenNetworkConfiguration";
const char kDevicePolicyRefreshRate[] = "DevicePolicyRefreshRate";
const char kDeviceQuirksDownloadEnabled[] = "DeviceQuirksDownloadEnabled";
const char kDeviceRebootOnShutdown[] = "DeviceRebootOnShutdown";
const char kDeviceRollbackAllowedMilestones[] = "DeviceRollbackAllowedMilestones";
const char kDeviceRollbackToTargetVersion[] = "DeviceRollbackToTargetVersion";
const char kDeviceSamlLoginAuthenticationType[] = "DeviceSamlLoginAuthenticationType";
const char kDeviceSecondFactorAuthentication[] = "DeviceSecondFactorAuthentication";
const char kDeviceShowUserNamesOnSignin[] = "DeviceShowUserNamesOnSignin";
const char kDeviceStartUpFlags[] = "DeviceStartUpFlags";
const char kDeviceStartUpUrls[] = "DeviceStartUpUrls";
const char kDeviceTargetVersionPrefix[] = "DeviceTargetVersionPrefix";
const char kDeviceTransferSAMLCookies[] = "DeviceTransferSAMLCookies";
const char kDeviceUpdateAllowedConnectionTypes[] = "DeviceUpdateAllowedConnectionTypes";
const char kDeviceUpdateHttpDownloadsEnabled[] = "DeviceUpdateHttpDownloadsEnabled";
const char kDeviceUpdateScatterFactor[] = "DeviceUpdateScatterFactor";
const char kDeviceUserPolicyLoopbackProcessingMode[] = "DeviceUserPolicyLoopbackProcessingMode";
const char kDeviceUserWhitelist[] = "DeviceUserWhitelist";
const char kDeviceVariationsRestrictParameter[] = "DeviceVariationsRestrictParameter";
const char kDeviceWallpaperImage[] = "DeviceWallpaperImage";
const char kDisable3DAPIs[] = "Disable3DAPIs";
const char kDisableAuthNegotiateCnameLookup[] = "DisableAuthNegotiateCnameLookup";
const char kDisablePluginFinder[] = "DisablePluginFinder";
const char kDisablePrintPreview[] = "DisablePrintPreview";
const char kDisableSSLRecordSplitting[] = "DisableSSLRecordSplitting";
const char kDisableSafeBrowsingProceedAnyway[] = "DisableSafeBrowsingProceedAnyway";
const char kDisableScreenshots[] = "DisableScreenshots";
const char kDisableSpdy[] = "DisableSpdy";
const char kDisabledPlugins[] = "DisabledPlugins";
const char kDisabledPluginsExceptions[] = "DisabledPluginsExceptions";
const char kDisabledSchemes[] = "DisabledSchemes";
const char kDiskCacheDir[] = "DiskCacheDir";
const char kDiskCacheSize[] = "DiskCacheSize";
const char kDisplayRotationDefault[] = "DisplayRotationDefault";
const char kDnsPrefetchingEnabled[] = "DnsPrefetchingEnabled";
const char kDownloadDirectory[] = "DownloadDirectory";
const char kDownloadRestrictions[] = "DownloadRestrictions";
const char kDriveDisabled[] = "DriveDisabled";
const char kDriveDisabledOverCellular[] = "DriveDisabledOverCellular";
const char kEasyUnlockAllowed[] = "EasyUnlockAllowed";
const char kEcryptfsMigrationStrategy[] = "EcryptfsMigrationStrategy";
const char kEditBookmarksEnabled[] = "EditBookmarksEnabled";
const char kEnableAuthNegotiatePort[] = "EnableAuthNegotiatePort";
const char kEnableCommonNameFallbackForLocalAnchors[] = "EnableCommonNameFallbackForLocalAnchors";
const char kEnableDeprecatedWebBasedSignin[] = "EnableDeprecatedWebBasedSignin";
const char kEnableDeprecatedWebPlatformFeatures[] = "EnableDeprecatedWebPlatformFeatures";
const char kEnableMediaRouter[] = "EnableMediaRouter";
const char kEnableMemoryInfo[] = "EnableMemoryInfo";
const char kEnableOnlineRevocationChecks[] = "EnableOnlineRevocationChecks";
const char kEnableOriginBoundCerts[] = "EnableOriginBoundCerts";
const char kEnableSha1ForLocalAnchors[] = "EnableSha1ForLocalAnchors";
const char kEnableSymantecLegacyInfrastructure[] = "EnableSymantecLegacyInfrastructure";
const char kEnableSyncConsent[] = "EnableSyncConsent";
const char kEnabledPlugins[] = "EnabledPlugins";
const char kEnterpriseWebStoreName[] = "EnterpriseWebStoreName";
const char kEnterpriseWebStoreURL[] = "EnterpriseWebStoreURL";
const char kExtensionAllowedTypes[] = "ExtensionAllowedTypes";
const char kExtensionCacheSize[] = "ExtensionCacheSize";
const char kExtensionInstallBlacklist[] = "ExtensionInstallBlacklist";
const char kExtensionInstallForcelist[] = "ExtensionInstallForcelist";
const char kExtensionInstallSources[] = "ExtensionInstallSources";
const char kExtensionInstallWhitelist[] = "ExtensionInstallWhitelist";
const char kExtensionSettings[] = "ExtensionSettings";
const char kExternalStorageDisabled[] = "ExternalStorageDisabled";
const char kExternalStorageReadOnly[] = "ExternalStorageReadOnly";
const char kForceBrowserSignin[] = "ForceBrowserSignin";
const char kForceEphemeralProfiles[] = "ForceEphemeralProfiles";
const char kForceGoogleSafeSearch[] = "ForceGoogleSafeSearch";
const char kForceMaximizeOnFirstRun[] = "ForceMaximizeOnFirstRun";
const char kForceSafeSearch[] = "ForceSafeSearch";
const char kForceYouTubeRestrict[] = "ForceYouTubeRestrict";
const char kForceYouTubeSafetyMode[] = "ForceYouTubeSafetyMode";
const char kFullscreenAllowed[] = "FullscreenAllowed";
const char kGCFUserDataDir[] = "GCFUserDataDir";
const char kGSSAPILibraryName[] = "GSSAPILibraryName";
const char kHardwareAccelerationModeEnabled[] = "HardwareAccelerationModeEnabled";
const char kHeartbeatEnabled[] = "HeartbeatEnabled";
const char kHeartbeatFrequency[] = "HeartbeatFrequency";
const char kHideWebStoreIcon[] = "HideWebStoreIcon";
const char kHideWebStorePromo[] = "HideWebStorePromo";
const char kHighContrastEnabled[] = "HighContrastEnabled";
const char kHomepageIsNewTabPage[] = "HomepageIsNewTabPage";
const char kHomepageLocation[] = "HomepageLocation";
const char kHttp09OnNonDefaultPortsEnabled[] = "Http09OnNonDefaultPortsEnabled";
const char kIdleAction[] = "IdleAction";
const char kIdleActionAC[] = "IdleActionAC";
const char kIdleActionBattery[] = "IdleActionBattery";
const char kIdleDelayAC[] = "IdleDelayAC";
const char kIdleDelayBattery[] = "IdleDelayBattery";
const char kIdleWarningDelayAC[] = "IdleWarningDelayAC";
const char kIdleWarningDelayBattery[] = "IdleWarningDelayBattery";
const char kImagesAllowedForUrls[] = "ImagesAllowedForUrls";
const char kImagesBlockedForUrls[] = "ImagesBlockedForUrls";
const char kImportAutofillFormData[] = "ImportAutofillFormData";
const char kImportBookmarks[] = "ImportBookmarks";
const char kImportHistory[] = "ImportHistory";
const char kImportHomepage[] = "ImportHomepage";
const char kImportSavedPasswords[] = "ImportSavedPasswords";
const char kImportSearchEngine[] = "ImportSearchEngine";
const char kIncognitoEnabled[] = "IncognitoEnabled";
const char kIncognitoModeAvailability[] = "IncognitoModeAvailability";
const char kInstantEnabled[] = "InstantEnabled";
const char kInstantTetheringAllowed[] = "InstantTetheringAllowed";
const char kIsolateOrigins[] = "IsolateOrigins";
const char kIsolateOriginsAndroid[] = "IsolateOriginsAndroid";
const char kJavaScriptAllowedForUrls[] = "JavaScriptAllowedForUrls";
const char kJavaScriptBlockedForUrls[] = "JavaScriptBlockedForUrls";
const char kJavascriptEnabled[] = "JavascriptEnabled";
const char kKeyPermissions[] = "KeyPermissions";
const char kKeyboardDefaultToFunctionKeys[] = "KeyboardDefaultToFunctionKeys";
const char kKeygenAllowedForUrls[] = "KeygenAllowedForUrls";
const char kKeygenBlockedForUrls[] = "KeygenBlockedForUrls";
const char kLargeCursorEnabled[] = "LargeCursorEnabled";
const char kLidCloseAction[] = "LidCloseAction";
const char kLogUploadEnabled[] = "LogUploadEnabled";
const char kLoginAuthenticationBehavior[] = "LoginAuthenticationBehavior";
const char kLoginVideoCaptureAllowedUrls[] = "LoginVideoCaptureAllowedUrls";
const char kMachineLevelUserCloudPolicyEnrollmentToken[] = "MachineLevelUserCloudPolicyEnrollmentToken";
const char kManagedBookmarks[] = "ManagedBookmarks";
const char kMaxConnectionsPerProxy[] = "MaxConnectionsPerProxy";
const char kMaxInvalidationFetchDelay[] = "MaxInvalidationFetchDelay";
const char kMediaCacheSize[] = "MediaCacheSize";
const char kMediaRouterCastAllowAllIPs[] = "MediaRouterCastAllowAllIPs";
const char kMetricsReportingEnabled[] = "MetricsReportingEnabled";
const char kMinimumRequiredChromeVersion[] = "MinimumRequiredChromeVersion";
const char kNTPContentSuggestionsEnabled[] = "NTPContentSuggestionsEnabled";
const char kNativeMessagingBlacklist[] = "NativeMessagingBlacklist";
const char kNativeMessagingUserLevelHosts[] = "NativeMessagingUserLevelHosts";
const char kNativeMessagingWhitelist[] = "NativeMessagingWhitelist";
const char kNativePrinters[] = "NativePrinters";
const char kNativePrintersBulkAccessMode[] = "NativePrintersBulkAccessMode";
const char kNativePrintersBulkBlacklist[] = "NativePrintersBulkBlacklist";
const char kNativePrintersBulkConfiguration[] = "NativePrintersBulkConfiguration";
const char kNativePrintersBulkWhitelist[] = "NativePrintersBulkWhitelist";
const char kNetworkPredictionOptions[] = "NetworkPredictionOptions";
const char kNetworkThrottlingEnabled[] = "NetworkThrottlingEnabled";
const char kNewTabPageLocation[] = "NewTabPageLocation";
const char kNoteTakingAppsLockScreenWhitelist[] = "NoteTakingAppsLockScreenWhitelist";
const char kNotificationsAllowedForUrls[] = "NotificationsAllowedForUrls";
const char kNotificationsBlockedForUrls[] = "NotificationsBlockedForUrls";
const char kNtlmV2Enabled[] = "NtlmV2Enabled";
const char kOpenNetworkConfiguration[] = "OpenNetworkConfiguration";
const char kPacHttpsUrlStrippingEnabled[] = "PacHttpsUrlStrippingEnabled";
const char kPasswordManagerAllowShowPasswords[] = "PasswordManagerAllowShowPasswords";
const char kPasswordManagerEnabled[] = "PasswordManagerEnabled";
const char kPasswordProtectionChangePasswordURL[] = "PasswordProtectionChangePasswordURL";
const char kPasswordProtectionLoginURLs[] = "PasswordProtectionLoginURLs";
const char kPasswordProtectionWarningTrigger[] = "PasswordProtectionWarningTrigger";
const char kPinUnlockMaximumLength[] = "PinUnlockMaximumLength";
const char kPinUnlockMinimumLength[] = "PinUnlockMinimumLength";
const char kPinUnlockWeakPinsAllowed[] = "PinUnlockWeakPinsAllowed";
const char kPinnedLauncherApps[] = "PinnedLauncherApps";
const char kPluginsAllowedForUrls[] = "PluginsAllowedForUrls";
const char kPluginsBlockedForUrls[] = "PluginsBlockedForUrls";
const char kPolicyRefreshRate[] = "PolicyRefreshRate";
const char kPopupsAllowedForUrls[] = "PopupsAllowedForUrls";
const char kPopupsBlockedForUrls[] = "PopupsBlockedForUrls";
const char kPowerManagementIdleSettings[] = "PowerManagementIdleSettings";
const char kPowerManagementUsesAudioActivity[] = "PowerManagementUsesAudioActivity";
const char kPowerManagementUsesVideoActivity[] = "PowerManagementUsesVideoActivity";
const char kPresentationIdleDelayScale[] = "PresentationIdleDelayScale";
const char kPresentationScreenDimDelayScale[] = "PresentationScreenDimDelayScale";
const char kPrintPreviewUseSystemDefaultPrinter[] = "PrintPreviewUseSystemDefaultPrinter";
const char kPrintingEnabled[] = "PrintingEnabled";
const char kPromptForDownloadLocation[] = "PromptForDownloadLocation";
const char kProxyBypassList[] = "ProxyBypassList";
const char kProxyMode[] = "ProxyMode";
const char kProxyPacUrl[] = "ProxyPacUrl";
const char kProxyServer[] = "ProxyServer";
const char kProxyServerMode[] = "ProxyServerMode";
const char kProxySettings[] = "ProxySettings";
const char kQuicAllowed[] = "QuicAllowed";
const char kQuickUnlockModeWhitelist[] = "QuickUnlockModeWhitelist";
const char kQuickUnlockTimeout[] = "QuickUnlockTimeout";
const char kRC4Enabled[] = "RC4Enabled";
const char kRebootAfterUpdate[] = "RebootAfterUpdate";
const char kRegisteredProtocolHandlers[] = "RegisteredProtocolHandlers";
const char kRelaunchNotification[] = "RelaunchNotification";
const char kRelaunchNotificationPeriod[] = "RelaunchNotificationPeriod";
const char kRemoteAccessClientFirewallTraversal[] = "RemoteAccessClientFirewallTraversal";
const char kRemoteAccessHostAllowClientPairing[] = "RemoteAccessHostAllowClientPairing";
const char kRemoteAccessHostAllowGnubbyAuth[] = "RemoteAccessHostAllowGnubbyAuth";
const char kRemoteAccessHostAllowRelayedConnection[] = "RemoteAccessHostAllowRelayedConnection";
const char kRemoteAccessHostAllowUiAccessForRemoteAssistance[] = "RemoteAccessHostAllowUiAccessForRemoteAssistance";
const char kRemoteAccessHostClientDomain[] = "RemoteAccessHostClientDomain";
const char kRemoteAccessHostClientDomainList[] = "RemoteAccessHostClientDomainList";
const char kRemoteAccessHostDebugOverridePolicies[] = "RemoteAccessHostDebugOverridePolicies";
const char kRemoteAccessHostDomain[] = "RemoteAccessHostDomain";
const char kRemoteAccessHostDomainList[] = "RemoteAccessHostDomainList";
const char kRemoteAccessHostFirewallTraversal[] = "RemoteAccessHostFirewallTraversal";
const char kRemoteAccessHostMatchUsername[] = "RemoteAccessHostMatchUsername";
const char kRemoteAccessHostRequireCurtain[] = "RemoteAccessHostRequireCurtain";
const char kRemoteAccessHostRequireTwoFactor[] = "RemoteAccessHostRequireTwoFactor";
const char kRemoteAccessHostTalkGadgetPrefix[] = "RemoteAccessHostTalkGadgetPrefix";
const char kRemoteAccessHostTokenUrl[] = "RemoteAccessHostTokenUrl";
const char kRemoteAccessHostTokenValidationCertificateIssuer[] = "RemoteAccessHostTokenValidationCertificateIssuer";
const char kRemoteAccessHostTokenValidationUrl[] = "RemoteAccessHostTokenValidationUrl";
const char kRemoteAccessHostUdpPortRange[] = "RemoteAccessHostUdpPortRange";
const char kRenderInChromeFrameList[] = "RenderInChromeFrameList";
const char kRenderInHostList[] = "RenderInHostList";
const char kReportArcStatusEnabled[] = "ReportArcStatusEnabled";
const char kReportDeviceActivityTimes[] = "ReportDeviceActivityTimes";
const char kReportDeviceBootMode[] = "ReportDeviceBootMode";
const char kReportDeviceHardwareStatus[] = "ReportDeviceHardwareStatus";
const char kReportDeviceLocation[] = "ReportDeviceLocation";
const char kReportDeviceNetworkInterfaces[] = "ReportDeviceNetworkInterfaces";
const char kReportDeviceSessionStatus[] = "ReportDeviceSessionStatus";
const char kReportDeviceUsers[] = "ReportDeviceUsers";
const char kReportDeviceVersionInfo[] = "ReportDeviceVersionInfo";
const char kReportUploadFrequency[] = "ReportUploadFrequency";
const char kRequireOnlineRevocationChecksForLocalAnchors[] = "RequireOnlineRevocationChecksForLocalAnchors";
const char kRestoreOnStartup[] = "RestoreOnStartup";
const char kRestoreOnStartupURLs[] = "RestoreOnStartupURLs";
const char kRestrictAccountsToPatterns[] = "RestrictAccountsToPatterns";
const char kRestrictSigninToPattern[] = "RestrictSigninToPattern";
const char kRoamingProfileLocation[] = "RoamingProfileLocation";
const char kRoamingProfileSupportEnabled[] = "RoamingProfileSupportEnabled";
const char kRunAllFlashInAllowMode[] = "RunAllFlashInAllowMode";
const char kSAMLOfflineSigninTimeLimit[] = "SAMLOfflineSigninTimeLimit";
const char kSSLErrorOverrideAllowed[] = "SSLErrorOverrideAllowed";
const char kSSLVersionFallbackMin[] = "SSLVersionFallbackMin";
const char kSSLVersionMax[] = "SSLVersionMax";
const char kSSLVersionMin[] = "SSLVersionMin";
const char kSafeBrowsingEnabled[] = "SafeBrowsingEnabled";
const char kSafeBrowsingExtendedReportingEnabled[] = "SafeBrowsingExtendedReportingEnabled";
const char kSafeBrowsingExtendedReportingOptInAllowed[] = "SafeBrowsingExtendedReportingOptInAllowed";
const char kSafeBrowsingForTrustedSourcesEnabled[] = "SafeBrowsingForTrustedSourcesEnabled";
const char kSafeBrowsingWhitelistDomains[] = "SafeBrowsingWhitelistDomains";
const char kSavingBrowserHistoryDisabled[] = "SavingBrowserHistoryDisabled";
const char kScreenDimDelayAC[] = "ScreenDimDelayAC";
const char kScreenDimDelayBattery[] = "ScreenDimDelayBattery";
const char kScreenLockDelayAC[] = "ScreenLockDelayAC";
const char kScreenLockDelayBattery[] = "ScreenLockDelayBattery";
const char kScreenLockDelays[] = "ScreenLockDelays";
const char kScreenMagnifierType[] = "ScreenMagnifierType";
const char kScreenOffDelayAC[] = "ScreenOffDelayAC";
const char kScreenOffDelayBattery[] = "ScreenOffDelayBattery";
const char kSearchSuggestEnabled[] = "SearchSuggestEnabled";
const char kSecondaryGoogleAccountSigninAllowed[] = "SecondaryGoogleAccountSigninAllowed";
const char kSecurityKeyPermitAttestation[] = "SecurityKeyPermitAttestation";
const char kSessionLengthLimit[] = "SessionLengthLimit";
const char kSessionLocales[] = "SessionLocales";
const char kShelfAutoHideBehavior[] = "ShelfAutoHideBehavior";
const char kShowAccessibilityOptionsInSystemTrayMenu[] = "ShowAccessibilityOptionsInSystemTrayMenu";
const char kShowAppsShortcutInBookmarkBar[] = "ShowAppsShortcutInBookmarkBar";
const char kShowCastIconInToolbar[] = "ShowCastIconInToolbar";
const char kShowHomeButton[] = "ShowHomeButton";
const char kShowLogoutButtonInTray[] = "ShowLogoutButtonInTray";
const char kSigninAllowed[] = "SigninAllowed";
const char kSitePerProcess[] = "SitePerProcess";
const char kSitePerProcessAndroid[] = "SitePerProcessAndroid";
const char kSkipMetadataCheck[] = "SkipMetadataCheck";
const char kSpellCheckServiceEnabled[] = "SpellCheckServiceEnabled";
const char kSpellcheckEnabled[] = "SpellcheckEnabled";
const char kSpellcheckLanguage[] = "SpellcheckLanguage";
const char kSpokenFeedbackEnabled[] = "SpokenFeedbackEnabled";
const char kSupervisedUserContentProviderEnabled[] = "SupervisedUserContentProviderEnabled";
const char kSupervisedUserCreationEnabled[] = "SupervisedUserCreationEnabled";
const char kSupervisedUsersEnabled[] = "SupervisedUsersEnabled";
const char kSuppressChromeFrameTurndownPrompt[] = "SuppressChromeFrameTurndownPrompt";
const char kSuppressUnsupportedOSWarning[] = "SuppressUnsupportedOSWarning";
const char kSyncDisabled[] = "SyncDisabled";
const char kSystemTimezone[] = "SystemTimezone";
const char kSystemTimezoneAutomaticDetection[] = "SystemTimezoneAutomaticDetection";
const char kSystemUse24HourClock[] = "SystemUse24HourClock";
const char kTPMFirmwareUpdateSettings[] = "TPMFirmwareUpdateSettings";
const char kTabUnderAllowed[] = "TabUnderAllowed";
const char kTaskManagerEndProcessEnabled[] = "TaskManagerEndProcessEnabled";
const char kTermsOfServiceURL[] = "TermsOfServiceURL";
const char kThirdPartyBlockingEnabled[] = "ThirdPartyBlockingEnabled";
const char kTouchVirtualKeyboardEnabled[] = "TouchVirtualKeyboardEnabled";
const char kTranslateEnabled[] = "TranslateEnabled";
const char kURLBlacklist[] = "URLBlacklist";
const char kURLWhitelist[] = "URLWhitelist";
const char kUnaffiliatedArcAllowed[] = "UnaffiliatedArcAllowed";
const char kUnifiedDesktopEnabledByDefault[] = "UnifiedDesktopEnabledByDefault";
const char kUnsafelyTreatInsecureOriginAsSecure[] = "UnsafelyTreatInsecureOriginAsSecure";
const char kUptimeLimit[] = "UptimeLimit";
const char kUsageTimeLimit[] = "UsageTimeLimit";
const char kUsbDetachableWhitelist[] = "UsbDetachableWhitelist";
const char kUserActivityScreenDimDelayScale[] = "UserActivityScreenDimDelayScale";
const char kUserAvatarImage[] = "UserAvatarImage";
const char kUserDataDir[] = "UserDataDir";
const char kUserDisplayName[] = "UserDisplayName";
const char kUserNativePrintersAllowed[] = "UserNativePrintersAllowed";
const char kVariationsRestrictParameter[] = "VariationsRestrictParameter";
const char kVideoCaptureAllowed[] = "VideoCaptureAllowed";
const char kVideoCaptureAllowedUrls[] = "VideoCaptureAllowedUrls";
const char kVirtualKeyboardEnabled[] = "VirtualKeyboardEnabled";
const char kVirtualMachinesAllowed[] = "VirtualMachinesAllowed";
const char kWPADQuickCheckEnabled[] = "WPADQuickCheckEnabled";
const char kWaitForInitialUserActivity[] = "WaitForInitialUserActivity";
const char kWallpaperImage[] = "WallpaperImage";
const char kWebDriverOverridesIncompatiblePolicies[] = "WebDriverOverridesIncompatiblePolicies";
const char kWebRestrictionsAuthority[] = "WebRestrictionsAuthority";
const char kWebRtcUdpPortRange[] = "WebRtcUdpPortRange";
const char kWebUsbAskForUrls[] = "WebUsbAskForUrls";
const char kWebUsbBlockedForUrls[] = "WebUsbBlockedForUrls";
const char kWelcomePageOnOSUpgradeEnabled[] = "WelcomePageOnOSUpgradeEnabled";

}  // namespace key

}  // namespace policy
